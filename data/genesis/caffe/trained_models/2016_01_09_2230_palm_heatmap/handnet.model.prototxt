name: "HandNet"

#layer {
#  name: "memory_frame"
#  type: "MemoryData"
#  memory_data_param {
#    channels: 1
#    width: 640
#    height: 480
#    batch_size: 1 
#  }
#  top: "data"
#  top: "label"
#}

layer {
  name: "handnet"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  ### TODO: remember, only do this if image is [0, 256)
  #transform_param {
  #  # Feature scaling coefficient: this maps the [0, 256) data to [0, 1)
  #  scale: 0.00390625
  #  mean_file: "/home/z/code/blaze_root/data/genesis/caffe/handnet_train_lmdb_mean.binaryproto"
  #}
  data_param {
    source: "/home/z/code/blaze_root/data/genesis/caffe/handnet_train_lmdb"
    batch_size: 16
    backend: LMDB
  }
}
layer {
  name: "handnet"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  ### TODO: remember, only do this if image is [0, 256)
  #transform_param {
  #  scale: 0.00390625
  #  mean_file: "/home/z/code/blaze_root/data/genesis/caffe/handnet_test_lmdb_mean.binaryproto"
  #}
  data_param {
    source: "/home/z/code/blaze_root/data/genesis/caffe/handnet_test_lmdb"
    batch_size: 50
    backend: LMDB
  }
}

layer {
  name: "flatten"
  type: "Reshape"
  bottom: "data"
  top: "data_flat"
  reshape_param {
    shape {
      dim: 0
      dim: 16640 # 128^2 + 16^2. Was 16426 = 128 * 128 + 6 * 7
    }
  }
}

layer {
  name: "split"
  type: "Slice"
  bottom: "data_flat"
  top: "image_flat"
  top: "palm_heatmap"
  slice_param {
    axis: 1
    slice_point: 16384 # 128 * 128
  }
}

#layer {
#  name: "extract_fingers"
#  type: "Slice"
#  bottom: "hand_model"
#  top: "palm_xyz"
#  top: "palm_uv_l"
#  top: "palm_uv_r"
#  top: "thumb_xyz"
#  top: "thumb_uv_l"
#  top: "thumb_uv_r"
#  top: "index_xyz"
#  top: "index_uv_l"
#  top: "index_uv_r"
#  top: "unused"
#  slice_param {
#    axis: 1
#    slice_point: 3 # palm_xyz
#    slice_point: 5
#    slice_point: 7
#    slice_point: 10 # thumb_xyz
#    slice_point: 12
#    slice_point: 14
#    slice_point: 17 # index_xyz
#    slice_point: 19
#    slice_point: 21
#  }
#}
#
#layer {
#  name: "silence_output"
#  type: "Silence"
#  bottom: "unused"
#  bottom: "palm_xyz"
#  bottom: "palm_uv_l"
#  bottom: "palm_uv_r"
#  bottom: "thumb_xyz"
#  bottom: "thumb_uv_l"
#  bottom: "thumb_uv_r"
#  bottom: "index_xyz"
#  bottom: "index_uv_l"
#  bottom: "index_uv_r"
#  bottom: "label"
#}

layer {
   name: "silence_output"
   type: "Silence"
   bottom: "palm_heatmap"
   bottom: "label"
}


layer {
  name: "unflatten_image"
  type: "Reshape"
  bottom: "image_flat"
  top: "image"
  reshape_param {
    shape {
      dim: 0
      dim: 1
      dim: 128
      dim: 128
    }
  }
}

layer {
  name: "conv1"
  type: "Convolution"
  bottom: "image"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 40  # was 20
    kernel_size: 7  # was 5
    stride: 2  # was 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3 # was 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 80 # was 40
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3 # was 2
    stride: 2
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 40 # was 30
    kernel_size: 3 # was 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 3 # was 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool3"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 2048 # was 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 2048 # was 1024, 2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "output"
  type: "InnerProduct"
  bottom: "ip2"
  top: "output"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 256 # 16 x 16
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "loss"
  type: "EuclideanLoss"
  bottom: "output"
  bottom: "palm_heatmap"
  top: "loss"
}

#layer {
#  name: "accuracy"
#  type: "Accuracy"
#  bottom: "ip2"
#  bottom: "label"
#  top: "accuracy"
#  include {
#    phase: TEST
#  }
#}

#layer {
#  name: "loss"
#  type: "SoftmaxWithLoss"
#  bottom: "ip2"
#  bottom: "label"
#  top: "loss"
#}

#layer {
#  name: "loss"
#  type: "HingeLoss"
#  bottom: "ip2"
#  bottom: "label"
#  top: "loss"
#}
