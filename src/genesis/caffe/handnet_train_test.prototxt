name: "HandNet"

#layer {
#  name: "memory_frame"
#  type: "MemoryData"
#  memory_data_param {
#    channels: 1
#    width: 640
#    height: 480
#    batch_size: 1 
#  }
#  top: "data"
#  top: "label"
#}

layer {
  name: "handnet"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  ### TODO: remember, only do this if image is [0, 256)
  #transform_param {
  #  # Feature scaling coefficient: this maps the [0, 256) data to [0, 1)
  #  scale: 0.00390625
  #  mean_file: "/home/z/hand_tracking/blaze_root/data/genesis/caffe/handnet_train_lmdb_mean.binaryproto"
  #}
  data_param {
    source: "/home/z/hand_tracking/blaze_root/data/genesis/caffe/handnet_train_lmdb"
    batch_size: 16
    backend: LMDB
  }
}
layer {
  name: "handnet"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  ### TODO: remember, only do this if image is [0, 256)
  #transform_param {
  #  scale: 0.00390625
  #  mean_file: "/home/z/hand_tracking/blaze_root/data/genesis/caffe/handnet_test_lmdb_mean.binaryproto"
  #}
  data_param {
    source: "/home/z/hand_tracking/blaze_root/data/genesis/caffe/handnet_test_lmdb"
    batch_size: 50
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 60 # was 20
    kernel_size: 11  # was 5
    stride: 4 # was 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
#layer {
#  name: "loss"
#  type: "HingeLoss"
#  bottom: "ip2"
#  bottom: "label"
#  top: "loss"
#}
