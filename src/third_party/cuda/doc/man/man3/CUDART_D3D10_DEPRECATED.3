.TH "Direct3D 10 Interoperability [DEPRECATED]" 3 "12 Jan 2017" "Version 6.0" "Doxygen" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Direct3D 10 Interoperability [DEPRECATED] \- 
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBcudaD3D10MapFlags\fP { \fBcudaD3D10MapFlagsNone\fP =  0, \fBcudaD3D10MapFlagsReadOnly\fP =  1, \fBcudaD3D10MapFlagsWriteDiscard\fP =  2 }"
.br
.ti -1c
.RI "enum \fBcudaD3D10RegisterFlags\fP { \fBcudaD3D10RegisterFlagsNone\fP =  0, \fBcudaD3D10RegisterFlagsArray\fP =  1 }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBcudaError_t\fP \fBcudaD3D10GetDirect3DDevice\fP (ID3D10Device **ppD3D10Device)"
.br
.RI "\fIGets the Direct3D device against which the current CUDA context was created. \fP"
.ti -1c
.RI "\fBcudaError_t\fP \fBcudaD3D10MapResources\fP (int count, ID3D10Resource **ppResources)"
.br
.RI "\fIMaps Direct3D Resources for access by CUDA. \fP"
.ti -1c
.RI "\fBcudaError_t\fP \fBcudaD3D10RegisterResource\fP (ID3D10Resource *pResource, unsigned int flags)"
.br
.RI "\fIRegisters a Direct3D 10 resource for access by CUDA. \fP"
.ti -1c
.RI "\fBcudaError_t\fP \fBcudaD3D10ResourceGetMappedArray\fP (cudaArray **ppArray, ID3D10Resource *pResource, unsigned int subResource)"
.br
.RI "\fIGets an array through which to access a subresource of a Direct3D resource which has been mapped for access by CUDA. \fP"
.ti -1c
.RI "\fBcudaError_t\fP \fBcudaD3D10ResourceGetMappedPitch\fP (size_t *pPitch, size_t *pPitchSlice, ID3D10Resource *pResource, unsigned int subResource)"
.br
.RI "\fIGets the pitch of a subresource of a Direct3D resource which has been mapped for access by CUDA. \fP"
.ti -1c
.RI "\fBcudaError_t\fP \fBcudaD3D10ResourceGetMappedPointer\fP (void **pPointer, ID3D10Resource *pResource, unsigned int subResource)"
.br
.RI "\fIGets a pointer through which to access a subresource of a Direct3D resource which has been mapped for access by CUDA. \fP"
.ti -1c
.RI "\fBcudaError_t\fP \fBcudaD3D10ResourceGetMappedSize\fP (size_t *pSize, ID3D10Resource *pResource, unsigned int subResource)"
.br
.RI "\fIGets the size of a subresource of a Direct3D resource which has been mapped for access by CUDA. \fP"
.ti -1c
.RI "\fBcudaError_t\fP \fBcudaD3D10ResourceGetSurfaceDimensions\fP (size_t *pWidth, size_t *pHeight, size_t *pDepth, ID3D10Resource *pResource, unsigned int subResource)"
.br
.RI "\fIGets the dimensions of a registered Direct3D surface. \fP"
.ti -1c
.RI "\fBcudaError_t\fP \fBcudaD3D10ResourceSetMapFlags\fP (ID3D10Resource *pResource, unsigned int flags)"
.br
.RI "\fISet usage flags for mapping a Direct3D resource. \fP"
.ti -1c
.RI "\fBcudaError_t\fP \fBcudaD3D10SetDirect3DDevice\fP (ID3D10Device *pD3D10Device, int device=-1)"
.br
.RI "\fISets the Direct3D 10 device to use for interoperability with a CUDA device. \fP"
.ti -1c
.RI "\fBcudaError_t\fP \fBcudaD3D10UnmapResources\fP (int count, ID3D10Resource **ppResources)"
.br
.RI "\fIUnmaps Direct3D resources. \fP"
.ti -1c
.RI "\fBcudaError_t\fP \fBcudaD3D10UnregisterResource\fP (ID3D10Resource *pResource)"
.br
.RI "\fIUnregisters a Direct3D resource. \fP"
.in -1c
.SH "Detailed Description"
.PP 
This section describes deprecated Direct3D 10 interoperability functions. 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBcudaD3D10MapFlags\fP"
.PP
CUDA D3D10 Map Flags 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIcudaD3D10MapFlagsNone \fP\fP
Default; Assume resource can be read/written 
.TP
\fB\fIcudaD3D10MapFlagsReadOnly \fP\fP
CUDA kernels will not write to this resource 
.TP
\fB\fIcudaD3D10MapFlagsWriteDiscard \fP\fP
CUDA kernels will only write to and will not read from this resource 
.SS "enum \fBcudaD3D10RegisterFlags\fP"
.PP
CUDA D3D10 Register Flags 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIcudaD3D10RegisterFlagsNone \fP\fP
Default; Resource can be accessed through a void* 
.TP
\fB\fIcudaD3D10RegisterFlagsArray \fP\fP
Resource can be accessed through a CUarray* 
.SH "Function Documentation"
.PP 
.SS "\fBcudaError_t\fP cudaD3D10GetDirect3DDevice (ID3D10Device ** ppD3D10Device)"
.PP
\fBDeprecated\fP
.RS 4
This function is deprecated as of CUDA 5.0.
.RE
.PP
This function is deprecated and should no longer be used. It is no longer necessary to associate a CUDA device with a D3D10 device in order to achieve maximum interoperability performance.
.PP
\fBParameters:\fP
.RS 4
\fIppD3D10Device\fP - Returns the Direct3D device for this thread
.RE
.PP
\fBReturns:\fP
.RS 4
\fBcudaSuccess\fP, \fBcudaErrorUnknown\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcudaD3D10SetDirect3DDevice\fP 
.RE
.PP

.SS "\fBcudaError_t\fP cudaD3D10MapResources (int count, ID3D10Resource ** ppResources)"
.PP
\fBDeprecated\fP
.RS 4
This function is deprecated as of CUDA 3.0.
.RE
.PP
Maps the \fCcount\fP Direct3D resources in \fCppResources\fP for access by CUDA.
.PP
The resources in \fCppResources\fP may be accessed in CUDA kernels until they are unmapped. Direct3D should not access any resources while they are mapped by CUDA. If an application does so, the results are undefined.
.PP
This function provides the synchronization guarantee that any Direct3D calls issued before \fBcudaD3D10MapResources()\fP will complete before any CUDA kernels issued after \fBcudaD3D10MapResources()\fP begin.
.PP
If any of \fCppResources\fP have not been registered for use with CUDA or if \fCppResources\fP contains any duplicate entries then \fBcudaErrorInvalidResourceHandle\fP is returned. If any of \fCppResources\fP are presently mapped for access by CUDA then \fBcudaErrorUnknown\fP is returned.
.PP
\fBParameters:\fP
.RS 4
\fIcount\fP - Number of resources to map for CUDA 
.br
\fIppResources\fP - Resources to map for CUDA
.RE
.PP
\fBReturns:\fP
.RS 4
\fBcudaSuccess\fP, \fBcudaErrorInvalidResourceHandle\fP, \fBcudaErrorUnknown\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcudaGraphicsMapResources\fP 
.RE
.PP

.SS "\fBcudaError_t\fP cudaD3D10RegisterResource (ID3D10Resource * pResource, unsigned int flags)"
.PP
\fBDeprecated\fP
.RS 4
This function is deprecated as of CUDA 3.0.
.RE
.PP
Registers the Direct3D resource \fCpResource\fP for access by CUDA.
.PP
If this call is successful, then the application will be able to map and unmap this resource until it is unregistered through \fBcudaD3D10UnregisterResource()\fP. Also on success, this call will increase the internal reference count on \fCpResource\fP. This reference count will be decremented when this resource is unregistered through \fBcudaD3D10UnregisterResource()\fP.
.PP
This call potentially has a high-overhead and should not be called every frame in interactive applications.
.PP
The type of \fCpResource\fP must be one of the following:
.PP
.IP "\(bu" 2
ID3D10Buffer: Cannot be used with \fCflags\fP set to \fCcudaD3D10RegisterFlagsArray\fP.
.IP "\(bu" 2
ID3D10Texture1D: No restrictions.
.IP "\(bu" 2
ID3D10Texture2D: No restrictions.
.IP "\(bu" 2
ID3D10Texture3D: No restrictions.
.PP
.PP
The \fCflags\fP argument specifies the mechanism through which CUDA will access the Direct3D resource. The following values are allowed.
.PP
.IP "\(bu" 2
\fBcudaD3D10RegisterFlagsNone\fP: Specifies that CUDA will access this resource through a \fCvoid*\fP. The pointer, size, and pitch for each subresource of this resource may be queried through \fBcudaD3D10ResourceGetMappedPointer()\fP, \fBcudaD3D10ResourceGetMappedSize()\fP, and \fBcudaD3D10ResourceGetMappedPitch()\fP respectively. This option is valid for all resource types.
.IP "\(bu" 2
\fBcudaD3D10RegisterFlagsArray\fP: Specifies that CUDA will access this resource through a \fCCUarray\fP queried on a sub-resource basis through \fBcudaD3D10ResourceGetMappedArray()\fP. This option is only valid for resources of type ID3D10Texture1D, ID3D10Texture2D, and ID3D10Texture3D.
.PP
.PP
Not all Direct3D resources of the above types may be used for interoperability with CUDA. The following are some limitations.
.PP
.IP "\(bu" 2
The primary rendertarget may not be registered with CUDA.
.IP "\(bu" 2
Resources allocated as shared may not be registered with CUDA.
.IP "\(bu" 2
Textures which are not of a format which is 1, 2, or 4 channels of 8, 16, or 32-bit integer or floating-point data cannot be shared.
.IP "\(bu" 2
Surfaces of depth or stencil formats cannot be shared.
.PP
.PP
If Direct3D interoperability is not initialized on this context then \fBcudaErrorInvalidDevice\fP is returned. If \fCpResource\fP is of incorrect type or is already registered then \fBcudaErrorInvalidResourceHandle\fP is returned. If \fCpResource\fP cannot be registered then \fBcudaErrorUnknown\fP is returned.
.PP
\fBParameters:\fP
.RS 4
\fIpResource\fP - Resource to register 
.br
\fIflags\fP - Parameters for resource registration
.RE
.PP
\fBReturns:\fP
.RS 4
\fBcudaSuccess\fP, \fBcudaErrorInvalidDevice\fP, \fBcudaErrorInvalidValue\fP, \fBcudaErrorInvalidResourceHandle\fP, \fBcudaErrorUnknown\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcudaGraphicsD3D10RegisterResource\fP 
.RE
.PP

.SS "\fBcudaError_t\fP cudaD3D10ResourceGetMappedArray (cudaArray ** ppArray, ID3D10Resource * pResource, unsigned int subResource)"
.PP
\fBDeprecated\fP
.RS 4
This function is deprecated as of CUDA 3.0.
.RE
.PP
Returns in \fC*ppArray\fP an array through which the subresource of the mapped Direct3D resource \fCpResource\fP which corresponds to \fCsubResource\fP may be accessed. The value set in \fCppArray\fP may change every time that \fCpResource\fP is mapped.
.PP
If \fCpResource\fP is not registered, then \fBcudaErrorInvalidResourceHandle\fP is returned. If \fCpResource\fP was not registered with usage flags \fBcudaD3D10RegisterFlagsArray\fP, then \fBcudaErrorInvalidResourceHandle\fP is returned. If \fCpResource\fP is not mapped then \fBcudaErrorUnknown\fP is returned.
.PP
For usage requirements of the \fCsubResource\fP parameter, see \fBcudaD3D10ResourceGetMappedPointer()\fP.
.PP
\fBParameters:\fP
.RS 4
\fIppArray\fP - Returned array corresponding to subresource 
.br
\fIpResource\fP - Mapped resource to access 
.br
\fIsubResource\fP - Subresource of pResource to access
.RE
.PP
\fBReturns:\fP
.RS 4
\fBcudaSuccess\fP, \fBcudaErrorInvalidValue\fP, \fBcudaErrorInvalidResourceHandle\fP, \fBcudaErrorUnknown\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcudaGraphicsSubResourceGetMappedArray\fP 
.RE
.PP

.SS "\fBcudaError_t\fP cudaD3D10ResourceGetMappedPitch (size_t * pPitch, size_t * pPitchSlice, ID3D10Resource * pResource, unsigned int subResource)"
.PP
\fBDeprecated\fP
.RS 4
This function is deprecated as of CUDA 3.0.
.RE
.PP
Returns in \fC*pPitch\fP and \fC*pPitchSlice\fP the pitch and Z-slice pitch of the subresource of the mapped Direct3D resource \fCpResource\fP, which corresponds to \fCsubResource\fP. The values set in \fCpPitch\fP and \fCpPitchSlice\fP may change every time that \fCpResource\fP is mapped.
.PP
The pitch and Z-slice pitch values may be used to compute the location of a sample on a surface as follows.
.PP
For a 2D surface, the byte offset of the sample at position \fBx\fP, \fBy\fP from the base pointer of the surface is:
.PP
\fBy\fP * \fBpitch\fP + (\fBbytes per pixel\fP) * \fBx\fP 
.PP
For a 3D surface, the byte offset of the sample at position \fBx\fP, \fBy\fP, \fBz\fP from the base pointer of the surface is:
.PP
\fBz*\fP \fBslicePitch\fP + \fBy\fP * \fBpitch\fP + (\fBbytes per pixel\fP) * \fBx\fP 
.PP
Both parameters \fCpPitch\fP and \fCpPitchSlice\fP are optional and may be set to NULL.
.PP
If \fCpResource\fP is not of type ID3D10Texture1D, ID3D10Texture2D, or ID3D10Texture3D, or if \fCpResource\fP has not been registered for use with CUDA, then \fBcudaErrorInvalidResourceHandle\fP is returned. If \fCpResource\fP was not registered with usage flags \fBcudaD3D10RegisterFlagsNone\fP, then \fBcudaErrorInvalidResourceHandle\fP is returned. If \fCpResource\fP is not mapped for access by CUDA then \fBcudaErrorUnknown\fP is returned.
.PP
For usage requirements of the \fCsubResource\fP parameter see \fBcudaD3D10ResourceGetMappedPointer()\fP.
.PP
\fBParameters:\fP
.RS 4
\fIpPitch\fP - Returned pitch of subresource 
.br
\fIpPitchSlice\fP - Returned Z-slice pitch of subresource 
.br
\fIpResource\fP - Mapped resource to access 
.br
\fIsubResource\fP - Subresource of pResource to access
.RE
.PP
\fBReturns:\fP
.RS 4
\fBcudaSuccess\fP, \fBcudaErrorInvalidValue\fP, \fBcudaErrorInvalidResourceHandle\fP, \fBcudaErrorUnknown\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcudaGraphicsSubResourceGetMappedArray\fP 
.RE
.PP

.SS "\fBcudaError_t\fP cudaD3D10ResourceGetMappedPointer (void ** pPointer, ID3D10Resource * pResource, unsigned int subResource)"
.PP
\fBDeprecated\fP
.RS 4
This function is deprecated as of CUDA 3.0.
.RE
.PP
Returns in \fC*pPointer\fP the base pointer of the subresource of the mapped Direct3D resource \fCpResource\fP which corresponds to \fCsubResource\fP. The value set in \fCpPointer\fP may change every time that \fCpResource\fP is mapped.
.PP
If \fCpResource\fP is not registered, then \fBcudaErrorInvalidResourceHandle\fP is returned. If \fCpResource\fP was not registered with usage flags \fBcudaD3D9RegisterFlagsNone\fP, then \fBcudaErrorInvalidResourceHandle\fP is returned. If \fCpResource\fP is not mapped then \fBcudaErrorUnknown\fP is returned.
.PP
If \fCpResource\fP is of type ID3D10Buffer then \fCsubResource\fP must be 0. If \fCpResource\fP is of any other type, then the value of \fCsubResource\fP must come from the subresource calculation in D3D10CalcSubResource().
.PP
\fBParameters:\fP
.RS 4
\fIpPointer\fP - Returned pointer corresponding to subresource 
.br
\fIpResource\fP - Mapped resource to access 
.br
\fIsubResource\fP - Subresource of pResource to access
.RE
.PP
\fBReturns:\fP
.RS 4
\fBcudaSuccess\fP, \fBcudaErrorInvalidValue\fP, \fBcudaErrorInvalidResourceHandle\fP, \fBcudaErrorUnknown\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcudaGraphicsResourceGetMappedPointer\fP 
.RE
.PP

.SS "\fBcudaError_t\fP cudaD3D10ResourceGetMappedSize (size_t * pSize, ID3D10Resource * pResource, unsigned int subResource)"
.PP
\fBDeprecated\fP
.RS 4
This function is deprecated as of CUDA 3.0.
.RE
.PP
Returns in \fC*pSize\fP the size of the subresource of the mapped Direct3D resource \fCpResource\fP which corresponds to \fCsubResource\fP. The value set in \fCpSize\fP may change every time that \fCpResource\fP is mapped.
.PP
If \fCpResource\fP has not been registered for use with CUDA then cudaErrorInvalidHandle is returned. If \fCpResource\fP was not registered with usage flags \fBcudaD3D10RegisterFlagsNone\fP, then \fBcudaErrorInvalidResourceHandle\fP is returned. If \fCpResource\fP is not mapped for access by CUDA then \fBcudaErrorUnknown\fP is returned.
.PP
For usage requirements of the \fCsubResource\fP parameter see \fBcudaD3D10ResourceGetMappedPointer()\fP.
.PP
\fBParameters:\fP
.RS 4
\fIpSize\fP - Returned size of subresource 
.br
\fIpResource\fP - Mapped resource to access 
.br
\fIsubResource\fP - Subresource of pResource to access
.RE
.PP
\fBReturns:\fP
.RS 4
\fBcudaSuccess\fP, \fBcudaErrorInvalidValue\fP, \fBcudaErrorInvalidResourceHandle\fP, \fBcudaErrorUnknown\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcudaGraphicsResourceGetMappedPointer\fP 
.RE
.PP

.SS "\fBcudaError_t\fP cudaD3D10ResourceGetSurfaceDimensions (size_t * pWidth, size_t * pHeight, size_t * pDepth, ID3D10Resource * pResource, unsigned int subResource)"
.PP
\fBDeprecated\fP
.RS 4
This function is deprecated as of CUDA 3.0.
.RE
.PP
Returns in \fC*pWidth\fP, \fC*pHeight\fP, and \fC*pDepth\fP the dimensions of the subresource of the mapped Direct3D resource \fCpResource\fP which corresponds to \fCsubResource\fP.
.PP
Since anti-aliased surfaces may have multiple samples per pixel, it is possible that the dimensions of a resource will be an integer factor larger than the dimensions reported by the Direct3D runtime.
.PP
The parameters \fCpWidth\fP, \fCpHeight\fP, and \fCpDepth\fP are optional. For 2D surfaces, the value returned in \fC*pDepth\fP will be 0.
.PP
If \fCpResource\fP is not of type ID3D10Texture1D, ID3D10Texture2D, or ID3D10Texture3D, or if \fCpResource\fP has not been registered for use with CUDA, then cudaErrorInvalidHandle is returned.
.PP
For usage requirements of \fCsubResource\fP parameters see \fBcudaD3D10ResourceGetMappedPointer()\fP.
.PP
\fBParameters:\fP
.RS 4
\fIpWidth\fP - Returned width of surface 
.br
\fIpHeight\fP - Returned height of surface 
.br
\fIpDepth\fP - Returned depth of surface 
.br
\fIpResource\fP - Registered resource to access 
.br
\fIsubResource\fP - Subresource of pResource to access
.RE
.PP
\fBReturns:\fP
.RS 4
\fBcudaSuccess\fP, \fBcudaErrorInvalidValue\fP, \fBcudaErrorInvalidResourceHandle\fP, 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcudaGraphicsSubResourceGetMappedArray\fP 
.RE
.PP

.SS "\fBcudaError_t\fP cudaD3D10ResourceSetMapFlags (ID3D10Resource * pResource, unsigned int flags)"
.PP
\fBDeprecated\fP
.RS 4
This function is deprecated as of CUDA 3.0.
.RE
.PP
Set usage flags for mapping the Direct3D resource \fCpResource\fP.
.PP
Changes to flags will take effect the next time \fCpResource\fP is mapped. The \fCflags\fP argument may be any of the following:
.PP
.IP "\(bu" 2
\fBcudaD3D10MapFlagsNone\fP: Specifies no hints about how this resource will be used. It is therefore assumed that this resource will be read from and written to by CUDA kernels. This is the default value.
.IP "\(bu" 2
\fBcudaD3D10MapFlagsReadOnly\fP: Specifies that CUDA kernels which access this resource will not write to this resource.
.IP "\(bu" 2
\fBcudaD3D10MapFlagsWriteDiscard\fP: Specifies that CUDA kernels which access this resource will not read from this resource and will write over the entire contents of the resource, so none of the data previously stored in the resource will be preserved.
.PP
.PP
If \fCpResource\fP has not been registered for use with CUDA then cudaErrorInvalidHandle is returned. If \fCpResource\fP is presently mapped for access by CUDA then \fBcudaErrorUnknown\fP is returned.
.PP
\fBParameters:\fP
.RS 4
\fIpResource\fP - Registered resource to set flags for 
.br
\fIflags\fP - Parameters for resource mapping
.RE
.PP
\fBReturns:\fP
.RS 4
\fBcudaSuccess\fP, \fBcudaErrorInvalidValue\fP, \fBcudaErrorInvalidResourceHandle\fP, \fBcudaErrorUnknown\fP, 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcudaGraphicsResourceSetMapFlags\fP 
.RE
.PP

.SS "\fBcudaError_t\fP cudaD3D10SetDirect3DDevice (ID3D10Device * pD3D10Device, int device = \fC-1\fP)"
.PP
\fBDeprecated\fP
.RS 4
This function is deprecated as of CUDA 5.0.
.RE
.PP
This function is deprecated and should no longer be used. It is no longer necessary to associate a CUDA device with a D3D10 device in order to achieve maximum interoperability performance.
.PP
\fBParameters:\fP
.RS 4
\fIpD3D10Device\fP - Direct3D device to use for interoperability 
.br
\fIdevice\fP - The CUDA device to use. This device must be among the devices returned when querying \fBcudaD3D10DeviceListAll\fP from \fBcudaD3D10GetDevices\fP, may be set to -1 to automatically select an appropriate CUDA device.
.RE
.PP
\fBReturns:\fP
.RS 4
\fBcudaSuccess\fP, \fBcudaErrorInitializationError\fP, \fBcudaErrorInvalidValue\fP, \fBcudaErrorSetOnActiveProcess\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcudaD3D10GetDevice\fP, \fBcudaGraphicsD3D10RegisterResource\fP, \fBcudaDeviceReset\fP 
.RE
.PP

.SS "\fBcudaError_t\fP cudaD3D10UnmapResources (int count, ID3D10Resource ** ppResources)"
.PP
\fBDeprecated\fP
.RS 4
This function is deprecated as of CUDA 3.0.
.RE
.PP
Unmaps the \fCcount\fP Direct3D resource in \fCppResources\fP.
.PP
This function provides the synchronization guarantee that any CUDA kernels issued before \fBcudaD3D10UnmapResources()\fP will complete before any Direct3D calls issued after \fBcudaD3D10UnmapResources()\fP begin.
.PP
If any of \fCppResources\fP have not been registered for use with CUDA or if \fCppResources\fP contains any duplicate entries, then \fBcudaErrorInvalidResourceHandle\fP is returned. If any of \fCppResources\fP are not presently mapped for access by CUDA then \fBcudaErrorUnknown\fP is returned.
.PP
\fBParameters:\fP
.RS 4
\fIcount\fP - Number of resources to unmap for CUDA 
.br
\fIppResources\fP - Resources to unmap for CUDA
.RE
.PP
\fBReturns:\fP
.RS 4
\fBcudaSuccess\fP, \fBcudaErrorInvalidResourceHandle\fP, \fBcudaErrorUnknown\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcudaGraphicsUnmapResources\fP 
.RE
.PP

.SS "\fBcudaError_t\fP cudaD3D10UnregisterResource (ID3D10Resource * pResource)"
.PP
\fBDeprecated\fP
.RS 4
This function is deprecated as of CUDA 3.0.
.RE
.PP
Unregisters the Direct3D resource \fCresource\fP so it is not accessible by CUDA unless registered again.
.PP
If \fCpResource\fP is not registered, then \fBcudaErrorInvalidResourceHandle\fP is returned.
.PP
\fBParameters:\fP
.RS 4
\fIpResource\fP - Resource to unregister
.RE
.PP
\fBReturns:\fP
.RS 4
\fBcudaSuccess\fP, \fBcudaErrorInvalidResourceHandle\fP, \fBcudaErrorUnknown\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcudaGraphicsUnregisterResource\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen from the source code.
