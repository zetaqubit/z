.TH "OpenGL Interoperability [DEPRECATED]" 3 "12 Jan 2017" "Version 6.0" "Doxygen" \" -*- nroff -*-
.ad l
.nh
.SH NAME
OpenGL Interoperability [DEPRECATED] \- 
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBcudaGLMapFlags\fP { \fBcudaGLMapFlagsNone\fP =  0, \fBcudaGLMapFlagsReadOnly\fP =  1, \fBcudaGLMapFlagsWriteDiscard\fP =  2 }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBcudaError_t\fP \fBcudaGLMapBufferObject\fP (void **devPtr, GLuint bufObj)"
.br
.RI "\fIMaps a buffer object for access by CUDA. \fP"
.ti -1c
.RI "\fBcudaError_t\fP \fBcudaGLMapBufferObjectAsync\fP (void **devPtr, GLuint bufObj, \fBcudaStream_t\fP stream)"
.br
.RI "\fIMaps a buffer object for access by CUDA. \fP"
.ti -1c
.RI "\fBcudaError_t\fP \fBcudaGLRegisterBufferObject\fP (GLuint bufObj)"
.br
.RI "\fIRegisters a buffer object for access by CUDA. \fP"
.ti -1c
.RI "\fBcudaError_t\fP \fBcudaGLSetBufferObjectMapFlags\fP (GLuint bufObj, unsigned int flags)"
.br
.RI "\fISet usage flags for mapping an OpenGL buffer. \fP"
.ti -1c
.RI "\fBcudaError_t\fP \fBcudaGLSetGLDevice\fP (int device)"
.br
.RI "\fISets a CUDA device to use OpenGL interoperability. \fP"
.ti -1c
.RI "\fBcudaError_t\fP \fBcudaGLUnmapBufferObject\fP (GLuint bufObj)"
.br
.RI "\fIUnmaps a buffer object for access by CUDA. \fP"
.ti -1c
.RI "\fBcudaError_t\fP \fBcudaGLUnmapBufferObjectAsync\fP (GLuint bufObj, \fBcudaStream_t\fP stream)"
.br
.RI "\fIUnmaps a buffer object for access by CUDA. \fP"
.ti -1c
.RI "\fBcudaError_t\fP \fBcudaGLUnregisterBufferObject\fP (GLuint bufObj)"
.br
.RI "\fIUnregisters a buffer object for access by CUDA. \fP"
.in -1c
.SH "Detailed Description"
.PP 
This section describes deprecated OpenGL interoperability functionality. 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBcudaGLMapFlags\fP"
.PP
CUDA GL Map Flags 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIcudaGLMapFlagsNone \fP\fP
Default; Assume resource can be read/written 
.TP
\fB\fIcudaGLMapFlagsReadOnly \fP\fP
CUDA kernels will not write to this resource 
.TP
\fB\fIcudaGLMapFlagsWriteDiscard \fP\fP
CUDA kernels will only write to and will not read from this resource 
.SH "Function Documentation"
.PP 
.SS "\fBcudaError_t\fP cudaGLMapBufferObject (void ** devPtr, GLuint bufObj)"
.PP
\fBDeprecated\fP
.RS 4
This function is deprecated as of CUDA 3.0.
.RE
.PP
Maps the buffer object of ID \fCbufObj\fP into the address space of CUDA and returns in \fC*devPtr\fP the base pointer of the resulting mapping. The buffer must have previously been registered by calling \fBcudaGLRegisterBufferObject()\fP. While a buffer is mapped by CUDA, any OpenGL operation which references the buffer will result in undefined behavior. The OpenGL context used to create the buffer, or another context from the same share group, must be bound to the current thread when this is called.
.PP
All streams in the current thread are synchronized with the current GL context.
.PP
\fBParameters:\fP
.RS 4
\fIdevPtr\fP - Returned device pointer to CUDA object 
.br
\fIbufObj\fP - Buffer object ID to map
.RE
.PP
\fBReturns:\fP
.RS 4
\fBcudaSuccess\fP, \fBcudaErrorMapBufferObjectFailed\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcudaGraphicsMapResources\fP 
.RE
.PP

.SS "\fBcudaError_t\fP cudaGLMapBufferObjectAsync (void ** devPtr, GLuint bufObj, \fBcudaStream_t\fP stream)"
.PP
\fBDeprecated\fP
.RS 4
This function is deprecated as of CUDA 3.0.
.RE
.PP
Maps the buffer object of ID \fCbufObj\fP into the address space of CUDA and returns in \fC*devPtr\fP the base pointer of the resulting mapping. The buffer must have previously been registered by calling \fBcudaGLRegisterBufferObject()\fP. While a buffer is mapped by CUDA, any OpenGL operation which references the buffer will result in undefined behavior. The OpenGL context used to create the buffer, or another context from the same share group, must be bound to the current thread when this is called.
.PP
Stream /p stream is synchronized with the current GL context.
.PP
\fBParameters:\fP
.RS 4
\fIdevPtr\fP - Returned device pointer to CUDA object 
.br
\fIbufObj\fP - Buffer object ID to map 
.br
\fIstream\fP - Stream to synchronize
.RE
.PP
\fBReturns:\fP
.RS 4
\fBcudaSuccess\fP, \fBcudaErrorMapBufferObjectFailed\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcudaGraphicsMapResources\fP 
.RE
.PP

.SS "\fBcudaError_t\fP cudaGLRegisterBufferObject (GLuint bufObj)"
.PP
\fBDeprecated\fP
.RS 4
This function is deprecated as of CUDA 3.0.
.RE
.PP
Registers the buffer object of ID \fCbufObj\fP for access by CUDA. This function must be called before CUDA can map the buffer object. The OpenGL context used to create the buffer, or another context from the same share group, must be bound to the current thread when this is called.
.PP
\fBParameters:\fP
.RS 4
\fIbufObj\fP - Buffer object ID to register
.RE
.PP
\fBReturns:\fP
.RS 4
\fBcudaSuccess\fP, \fBcudaErrorInitializationError\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcudaGraphicsGLRegisterBuffer\fP 
.RE
.PP

.SS "\fBcudaError_t\fP cudaGLSetBufferObjectMapFlags (GLuint bufObj, unsigned int flags)"
.PP
\fBDeprecated\fP
.RS 4
This function is deprecated as of CUDA 3.0.
.RE
.PP
Set flags for mapping the OpenGL buffer \fCbufObj\fP 
.PP
Changes to flags will take effect the next time \fCbufObj\fP is mapped. The \fCflags\fP argument may be any of the following:
.PP
.IP "\(bu" 2
\fBcudaGLMapFlagsNone\fP: Specifies no hints about how this buffer will be used. It is therefore assumed that this buffer will be read from and written to by CUDA kernels. This is the default value.
.IP "\(bu" 2
\fBcudaGLMapFlagsReadOnly\fP: Specifies that CUDA kernels which access this buffer will not write to the buffer.
.IP "\(bu" 2
\fBcudaGLMapFlagsWriteDiscard\fP: Specifies that CUDA kernels which access this buffer will not read from the buffer and will write over the entire contents of the buffer, so none of the data previously stored in the buffer will be preserved.
.PP
.PP
If \fCbufObj\fP has not been registered for use with CUDA, then \fBcudaErrorInvalidResourceHandle\fP is returned. If \fCbufObj\fP is presently mapped for access by CUDA, then \fBcudaErrorUnknown\fP is returned.
.PP
\fBParameters:\fP
.RS 4
\fIbufObj\fP - Registered buffer object to set flags for 
.br
\fIflags\fP - Parameters for buffer mapping
.RE
.PP
\fBReturns:\fP
.RS 4
\fBcudaSuccess\fP, \fBcudaErrorInvalidValue\fP, \fBcudaErrorInvalidResourceHandle\fP, \fBcudaErrorUnknown\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcudaGraphicsResourceSetMapFlags\fP 
.RE
.PP

.SS "\fBcudaError_t\fP cudaGLSetGLDevice (int device)"
.PP
\fBDeprecated\fP
.RS 4
This function is deprecated as of CUDA 5.0.
.RE
.PP
This function is deprecated and should no longer be used. It is no longer necessary to associate a CUDA device with an OpenGL context in order to achieve maximum interoperability performance.
.PP
\fBParameters:\fP
.RS 4
\fIdevice\fP - Device to use for OpenGL interoperability
.RE
.PP
\fBReturns:\fP
.RS 4
\fBcudaSuccess\fP, \fBcudaErrorInvalidDevice\fP, \fBcudaErrorSetOnActiveProcess\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcudaGraphicsGLRegisterBuffer\fP, \fBcudaGraphicsGLRegisterImage\fP 
.RE
.PP

.SS "\fBcudaError_t\fP cudaGLUnmapBufferObject (GLuint bufObj)"
.PP
\fBDeprecated\fP
.RS 4
This function is deprecated as of CUDA 3.0.
.RE
.PP
Unmaps the buffer object of ID \fCbufObj\fP for access by CUDA. When a buffer is unmapped, the base address returned by \fBcudaGLMapBufferObject()\fP is invalid and subsequent references to the address result in undefined behavior. The OpenGL context used to create the buffer, or another context from the same share group, must be bound to the current thread when this is called.
.PP
All streams in the current thread are synchronized with the current GL context.
.PP
\fBParameters:\fP
.RS 4
\fIbufObj\fP - Buffer object to unmap
.RE
.PP
\fBReturns:\fP
.RS 4
\fBcudaSuccess\fP, \fBcudaErrorInvalidDevicePointer\fP, \fBcudaErrorUnmapBufferObjectFailed\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcudaGraphicsUnmapResources\fP 
.RE
.PP

.SS "\fBcudaError_t\fP cudaGLUnmapBufferObjectAsync (GLuint bufObj, \fBcudaStream_t\fP stream)"
.PP
\fBDeprecated\fP
.RS 4
This function is deprecated as of CUDA 3.0.
.RE
.PP
Unmaps the buffer object of ID \fCbufObj\fP for access by CUDA. When a buffer is unmapped, the base address returned by \fBcudaGLMapBufferObject()\fP is invalid and subsequent references to the address result in undefined behavior. The OpenGL context used to create the buffer, or another context from the same share group, must be bound to the current thread when this is called.
.PP
Stream /p stream is synchronized with the current GL context.
.PP
\fBParameters:\fP
.RS 4
\fIbufObj\fP - Buffer object to unmap 
.br
\fIstream\fP - Stream to synchronize
.RE
.PP
\fBReturns:\fP
.RS 4
\fBcudaSuccess\fP, \fBcudaErrorInvalidDevicePointer\fP, \fBcudaErrorUnmapBufferObjectFailed\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcudaGraphicsUnmapResources\fP 
.RE
.PP

.SS "\fBcudaError_t\fP cudaGLUnregisterBufferObject (GLuint bufObj)"
.PP
\fBDeprecated\fP
.RS 4
This function is deprecated as of CUDA 3.0.
.RE
.PP
Unregisters the buffer object of ID \fCbufObj\fP for access by CUDA and releases any CUDA resources associated with the buffer. Once a buffer is unregistered, it may no longer be mapped by CUDA. The GL context used to create the buffer, or another context from the same share group, must be bound to the current thread when this is called.
.PP
\fBParameters:\fP
.RS 4
\fIbufObj\fP - Buffer object to unregister
.RE
.PP
\fBReturns:\fP
.RS 4
\fBcudaSuccess\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcudaGraphicsUnregisterResource\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen from the source code.
