.TH "Thread Management [DEPRECATED]" 3 "12 Jan 2017" "Version 6.0" "Doxygen" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Thread Management [DEPRECATED] \- 
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBcudaError_t\fP \fBcudaThreadExit\fP (void)"
.br
.RI "\fIExit and clean up from CUDA launches. \fP"
.ti -1c
.RI "\fBcudaError_t\fP \fBcudaThreadGetCacheConfig\fP (enum \fBcudaFuncCache\fP *pCacheConfig)"
.br
.RI "\fIReturns the preferred cache configuration for the current device. \fP"
.ti -1c
.RI "\fBcudaError_t\fP \fBcudaThreadGetLimit\fP (size_t *pValue, enum \fBcudaLimit\fP limit)"
.br
.RI "\fIReturns resource limits. \fP"
.ti -1c
.RI "\fBcudaError_t\fP \fBcudaThreadSetCacheConfig\fP (enum \fBcudaFuncCache\fP cacheConfig)"
.br
.RI "\fISets the preferred cache configuration for the current device. \fP"
.ti -1c
.RI "\fBcudaError_t\fP \fBcudaThreadSetLimit\fP (enum \fBcudaLimit\fP limit, size_t value)"
.br
.RI "\fISet resource limits. \fP"
.ti -1c
.RI "\fBcudaError_t\fP \fBcudaThreadSynchronize\fP (void)"
.br
.RI "\fIWait for compute device to finish. \fP"
.in -1c
.SH "Detailed Description"
.PP 
\\brief deprecated thread management functions of the CUDA runtime API (cuda_runtime_api.h)
.PP
This section describes deprecated thread management functions of the CUDA runtime application programming interface. 
.SH "Function Documentation"
.PP 
.SS "\fBcudaError_t\fP cudaThreadExit (void)"
.PP
\fBDeprecated\fP
.RS 4
.RE
.PP
Note that this function is deprecated because its name does not reflect its behavior. Its functionality is identical to the non-deprecated function \fBcudaDeviceReset()\fP, which should be used instead.
.PP
Explicitly destroys all cleans up all resources associated with the current device in the current process. Any subsequent API call to this device will reinitialize the device.
.PP
Note that this function will reset the device immediately. It is the caller's responsibility to ensure that the device is not being accessed by any other host threads from the process when this function is called.
.PP
\fBReturns:\fP
.RS 4
\fBcudaSuccess\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcudaDeviceReset\fP 
.RE
.PP

.SS "\fBcudaError_t\fP cudaThreadGetCacheConfig (enum \fBcudaFuncCache\fP * pCacheConfig)"
.PP
\fBDeprecated\fP
.RS 4
.RE
.PP
Note that this function is deprecated because its name does not reflect its behavior. Its functionality is identical to the non-deprecated function \fBcudaDeviceGetCacheConfig()\fP, which should be used instead.
.PP
On devices where the L1 cache and shared memory use the same hardware resources, this returns through \fCpCacheConfig\fP the preferred cache configuration for the current device. This is only a preference. The runtime will use the requested configuration if possible, but it is free to choose a different configuration if required to execute functions.
.PP
This will return a \fCpCacheConfig\fP of \fBcudaFuncCachePreferNone\fP on devices where the size of the L1 cache and shared memory are fixed.
.PP
The supported cache configurations are:
.IP "\(bu" 2
\fBcudaFuncCachePreferNone\fP: no preference for shared memory or L1 (default)
.IP "\(bu" 2
\fBcudaFuncCachePreferShared\fP: prefer larger shared memory and smaller L1 cache
.IP "\(bu" 2
\fBcudaFuncCachePreferL1\fP: prefer larger L1 cache and smaller shared memory
.PP
.PP
\fBParameters:\fP
.RS 4
\fIpCacheConfig\fP - Returned cache configuration
.RE
.PP
\fBReturns:\fP
.RS 4
\fBcudaSuccess\fP, \fBcudaErrorInitializationError\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcudaDeviceGetCacheConfig\fP 
.RE
.PP

.SS "\fBcudaError_t\fP cudaThreadGetLimit (size_t * pValue, enum \fBcudaLimit\fP limit)"
.PP
\fBDeprecated\fP
.RS 4
.RE
.PP
Note that this function is deprecated because its name does not reflect its behavior. Its functionality is identical to the non-deprecated function \fBcudaDeviceGetLimit()\fP, which should be used instead.
.PP
Returns in \fC*pValue\fP the current size of \fClimit\fP. The supported \fBcudaLimit\fP values are:
.IP "\(bu" 2
\fBcudaLimitStackSize\fP: stack size of each GPU thread;
.IP "\(bu" 2
\fBcudaLimitPrintfFifoSize\fP: size of the shared FIFO used by the printf() and fprintf() device system calls.
.IP "\(bu" 2
\fBcudaLimitMallocHeapSize\fP: size of the heap used by the malloc() and free() device system calls;
.PP
.PP
\fBParameters:\fP
.RS 4
\fIlimit\fP - Limit to query 
.br
\fIpValue\fP - Returned size in bytes of limit
.RE
.PP
\fBReturns:\fP
.RS 4
\fBcudaSuccess\fP, \fBcudaErrorUnsupportedLimit\fP, \fBcudaErrorInvalidValue\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcudaDeviceGetLimit\fP 
.RE
.PP

.SS "\fBcudaError_t\fP cudaThreadSetCacheConfig (enum \fBcudaFuncCache\fP cacheConfig)"
.PP
\fBDeprecated\fP
.RS 4
.RE
.PP
Note that this function is deprecated because its name does not reflect its behavior. Its functionality is identical to the non-deprecated function \fBcudaDeviceSetCacheConfig()\fP, which should be used instead.
.PP
On devices where the L1 cache and shared memory use the same hardware resources, this sets through \fCcacheConfig\fP the preferred cache configuration for the current device. This is only a preference. The runtime will use the requested configuration if possible, but it is free to choose a different configuration if required to execute the function. Any function preference set via \fBcudaFuncSetCacheConfig (C API)\fP or \fBcudaFuncSetCacheConfig (C++ API)\fP will be preferred over this device-wide setting. Setting the device-wide cache configuration to \fBcudaFuncCachePreferNone\fP will cause subsequent kernel launches to prefer to not change the cache configuration unless required to launch the kernel.
.PP
This setting does nothing on devices where the size of the L1 cache and shared memory are fixed.
.PP
Launching a kernel with a different preference than the most recent preference setting may insert a device-side synchronization point.
.PP
The supported cache configurations are:
.IP "\(bu" 2
\fBcudaFuncCachePreferNone\fP: no preference for shared memory or L1 (default)
.IP "\(bu" 2
\fBcudaFuncCachePreferShared\fP: prefer larger shared memory and smaller L1 cache
.IP "\(bu" 2
\fBcudaFuncCachePreferL1\fP: prefer larger L1 cache and smaller shared memory
.PP
.PP
\fBParameters:\fP
.RS 4
\fIcacheConfig\fP - Requested cache configuration
.RE
.PP
\fBReturns:\fP
.RS 4
\fBcudaSuccess\fP, \fBcudaErrorInitializationError\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcudaDeviceSetCacheConfig\fP 
.RE
.PP

.SS "\fBcudaError_t\fP cudaThreadSetLimit (enum \fBcudaLimit\fP limit, size_t value)"
.PP
\fBDeprecated\fP
.RS 4
.RE
.PP
Note that this function is deprecated because its name does not reflect its behavior. Its functionality is identical to the non-deprecated function \fBcudaDeviceSetLimit()\fP, which should be used instead.
.PP
Setting \fClimit\fP to \fCvalue\fP is a request by the application to update the current limit maintained by the device. The driver is free to modify the requested value to meet h/w requirements (this could be clamping to minimum or maximum values, rounding up to nearest element size, etc). The application can use \fBcudaThreadGetLimit()\fP to find out exactly what the limit has been set to.
.PP
Setting each \fBcudaLimit\fP has its own specific restrictions, so each is discussed here.
.PP
.IP "\(bu" 2
\fBcudaLimitStackSize\fP controls the stack size of each GPU thread.
.PP
.PP
.IP "\(bu" 2
\fBcudaLimitPrintfFifoSize\fP controls the size of the shared FIFO used by the printf() and fprintf() device system calls. Setting \fBcudaLimitPrintfFifoSize\fP must be performed before launching any kernel that uses the printf() or fprintf() device system calls, otherwise \fBcudaErrorInvalidValue\fP will be returned.
.PP
.PP
.IP "\(bu" 2
\fBcudaLimitMallocHeapSize\fP controls the size of the heap used by the malloc() and free() device system calls. Setting \fBcudaLimitMallocHeapSize\fP must be performed before launching any kernel that uses the malloc() or free() device system calls, otherwise \fBcudaErrorInvalidValue\fP will be returned.
.PP
.PP
\fBParameters:\fP
.RS 4
\fIlimit\fP - Limit to set 
.br
\fIvalue\fP - Size in bytes of limit
.RE
.PP
\fBReturns:\fP
.RS 4
\fBcudaSuccess\fP, \fBcudaErrorUnsupportedLimit\fP, \fBcudaErrorInvalidValue\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcudaDeviceSetLimit\fP 
.RE
.PP

.SS "\fBcudaError_t\fP cudaThreadSynchronize (void)"
.PP
\fBDeprecated\fP
.RS 4
.RE
.PP
Note that this function is deprecated because its name does not reflect its behavior. Its functionality is similar to the non-deprecated function \fBcudaDeviceSynchronize()\fP, which should be used instead.
.PP
Blocks until the device has completed all preceding requested tasks. \fBcudaThreadSynchronize()\fP returns an error if one of the preceding tasks has failed. If the \fBcudaDeviceScheduleBlockingSync\fP flag was set for this device, the host thread will block until the device has finished its work.
.PP
\fBReturns:\fP
.RS 4
\fBcudaSuccess\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcudaDeviceSynchronize\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen from the source code.
