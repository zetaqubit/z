.TH "Direct3D 10 Interoperability" 3 "12 Jan 2017" "Version 6.0" "Doxygen" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Direct3D 10 Interoperability \- 
.SS "Modules"

.in +1c
.ti -1c
.RI "\fBDirect3D 10 Interoperability [DEPRECATED]\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBCUd3d10DeviceList\fP { \fBCU_D3D10_DEVICE_LIST_ALL\fP =  0x01, \fBCU_D3D10_DEVICE_LIST_CURRENT_FRAME\fP =  0x02, \fBCU_D3D10_DEVICE_LIST_NEXT_FRAME\fP =  0x03 }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBCUresult\fP \fBcuD3D10GetDevice\fP (\fBCUdevice\fP *pCudaDevice, IDXGIAdapter *pAdapter)"
.br
.RI "\fIGets the CUDA device corresponding to a display adapter. \fP"
.ti -1c
.RI "\fBCUresult\fP \fBcuD3D10GetDevices\fP (unsigned int *pCudaDeviceCount, \fBCUdevice\fP *pCudaDevices, unsigned int cudaDeviceCount, ID3D10Device *pD3D10Device, \fBCUd3d10DeviceList\fP deviceList)"
.br
.RI "\fIGets the CUDA devices corresponding to a Direct3D 10 device. \fP"
.ti -1c
.RI "\fBCUresult\fP \fBcuGraphicsD3D10RegisterResource\fP (\fBCUgraphicsResource\fP *pCudaResource, ID3D10Resource *pD3DResource, unsigned int Flags)"
.br
.RI "\fIRegister a Direct3D 10 resource for access by CUDA. \fP"
.in -1c
.SH "Detailed Description"
.PP 
\\brief Direct3D 10 interoperability functions of the low-level CUDA driver API (cudaD3D10.h)
.PP
This section describes the Direct3D 10 interoperability functions of the low-level CUDA driver application programming interface. Note that mapping of Direct3D 10 resources is performed with the graphics API agnostic, resource mapping interface described in \fBGraphics Interoperability\fP. 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBCUd3d10DeviceList\fP"
.PP
CUDA devices corresponding to a D3D10 device 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fICU_D3D10_DEVICE_LIST_ALL \fP\fP
The CUDA devices for all GPUs used by a D3D10 device 
.TP
\fB\fICU_D3D10_DEVICE_LIST_CURRENT_FRAME \fP\fP
The CUDA devices for the GPUs used by a D3D10 device in its currently rendering frame 
.TP
\fB\fICU_D3D10_DEVICE_LIST_NEXT_FRAME \fP\fP
The CUDA devices for the GPUs to be used by a D3D10 device in the next frame 
.SH "Function Documentation"
.PP 
.SS "\fBCUresult\fP cuD3D10GetDevice (\fBCUdevice\fP * pCudaDevice, IDXGIAdapter * pAdapter)"
.PP
Returns in \fC*pCudaDevice\fP the CUDA-compatible device corresponding to the adapter \fCpAdapter\fP obtained from IDXGIFactory::EnumAdapters.
.PP
If no device on \fCpAdapter\fP is CUDA-compatible then the call will fail.
.PP
\fBParameters:\fP
.RS 4
\fIpCudaDevice\fP - Returned CUDA device corresponding to \fCpAdapter\fP 
.br
\fIpAdapter\fP - Adapter to query for CUDA device
.RE
.PP
\fBReturns:\fP
.RS 4
\fBCUDA_SUCCESS\fP, \fBCUDA_ERROR_DEINITIALIZED\fP, \fBCUDA_ERROR_NOT_INITIALIZED\fP, \fBCUDA_ERROR_INVALID_VALUE\fP, \fBCUDA_ERROR_NOT_FOUND\fP, \fBCUDA_ERROR_UNKNOWN\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcuD3D10GetDevices\fP 
.RE
.PP

.SS "\fBCUresult\fP cuD3D10GetDevices (unsigned int * pCudaDeviceCount, \fBCUdevice\fP * pCudaDevices, unsigned int cudaDeviceCount, ID3D10Device * pD3D10Device, \fBCUd3d10DeviceList\fP deviceList)"
.PP
Returns in \fC*pCudaDeviceCount\fP the number of CUDA-compatible device corresponding to the Direct3D 10 device \fCpD3D10Device\fP. Also returns in \fC*pCudaDevices\fP at most \fCcudaDeviceCount\fP of the CUDA-compatible devices corresponding to the Direct3D 10 device \fCpD3D10Device\fP.
.PP
If any of the GPUs being used to render \fCpDevice\fP are not CUDA capable then the call will return \fBCUDA_ERROR_NO_DEVICE\fP.
.PP
\fBParameters:\fP
.RS 4
\fIpCudaDeviceCount\fP - Returned number of CUDA devices corresponding to \fCpD3D10Device\fP 
.br
\fIpCudaDevices\fP - Returned CUDA devices corresponding to \fCpD3D10Device\fP 
.br
\fIcudaDeviceCount\fP - The size of the output device array \fCpCudaDevices\fP 
.br
\fIpD3D10Device\fP - Direct3D 10 device to query for CUDA devices 
.br
\fIdeviceList\fP - The set of devices to return. This set may be \fBCU_D3D10_DEVICE_LIST_ALL\fP for all devices, \fBCU_D3D10_DEVICE_LIST_CURRENT_FRAME\fP for the devices used to render the current frame (in SLI), or \fBCU_D3D10_DEVICE_LIST_NEXT_FRAME\fP for the devices used to render the next frame (in SLI).
.RE
.PP
\fBReturns:\fP
.RS 4
\fBCUDA_SUCCESS\fP, \fBCUDA_ERROR_DEINITIALIZED\fP, \fBCUDA_ERROR_NOT_INITIALIZED\fP, \fBCUDA_ERROR_NO_DEVICE\fP, \fBCUDA_ERROR_INVALID_VALUE\fP, \fBCUDA_ERROR_NOT_FOUND\fP, \fBCUDA_ERROR_UNKNOWN\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcuD3D10GetDevice\fP 
.RE
.PP

.SS "\fBCUresult\fP cuGraphicsD3D10RegisterResource (\fBCUgraphicsResource\fP * pCudaResource, ID3D10Resource * pD3DResource, unsigned int Flags)"
.PP
Registers the Direct3D 10 resource \fCpD3DResource\fP for access by CUDA and returns a CUDA handle to \fCpD3Dresource\fP in \fCpCudaResource\fP. The handle returned in \fCpCudaResource\fP may be used to map and unmap this resource until it is unregistered. On success this call will increase the internal reference count on \fCpD3DResource\fP. This reference count will be decremented when this resource is unregistered through \fBcuGraphicsUnregisterResource()\fP.
.PP
This call is potentially high-overhead and should not be called every frame in interactive applications.
.PP
The type of \fCpD3DResource\fP must be one of the following.
.IP "\(bu" 2
ID3D10Buffer: may be accessed through a device pointer.
.IP "\(bu" 2
ID3D10Texture1D: individual subresources of the texture may be accessed via arrays
.IP "\(bu" 2
ID3D10Texture2D: individual subresources of the texture may be accessed via arrays
.IP "\(bu" 2
ID3D10Texture3D: individual subresources of the texture may be accessed via arrays
.PP
.PP
The \fCFlags\fP argument may be used to specify additional parameters at register time. The valid values for this parameter are
.IP "\(bu" 2
CU_GRAPHICS_REGISTER_FLAGS_NONE: Specifies no hints about how this resource will be used.
.IP "\(bu" 2
CU_GRAPHICS_REGISTER_FLAGS_SURFACE_LDST: Specifies that CUDA will bind this resource to a surface reference.
.IP "\(bu" 2
CU_GRAPHICS_REGISTER_FLAGS_TEXTURE_GATHER: Specifies that CUDA will perform texture gather operations on this resource.
.PP
.PP
Not all Direct3D resources of the above types may be used for interoperability with CUDA. The following are some limitations.
.IP "\(bu" 2
The primary rendertarget may not be registered with CUDA.
.IP "\(bu" 2
Resources allocated as shared may not be registered with CUDA.
.IP "\(bu" 2
Textures which are not of a format which is 1, 2, or 4 channels of 8, 16, or 32-bit integer or floating-point data cannot be shared.
.IP "\(bu" 2
Surfaces of depth or stencil formats cannot be shared.
.PP
.PP
A complete list of supported DXGI formats is as follows. For compactness the notation A_{B,C,D} represents A_B, A_C, and A_D.
.IP "\(bu" 2
DXGI_FORMAT_A8_UNORM
.IP "\(bu" 2
DXGI_FORMAT_B8G8R8A8_UNORM
.IP "\(bu" 2
DXGI_FORMAT_B8G8R8X8_UNORM
.IP "\(bu" 2
DXGI_FORMAT_R16_FLOAT
.IP "\(bu" 2
DXGI_FORMAT_R16G16B16A16_{FLOAT,SINT,SNORM,UINT,UNORM}
.IP "\(bu" 2
DXGI_FORMAT_R16G16_{FLOAT,SINT,SNORM,UINT,UNORM}
.IP "\(bu" 2
DXGI_FORMAT_R16_{SINT,SNORM,UINT,UNORM}
.IP "\(bu" 2
DXGI_FORMAT_R32_FLOAT
.IP "\(bu" 2
DXGI_FORMAT_R32G32B32A32_{FLOAT,SINT,UINT}
.IP "\(bu" 2
DXGI_FORMAT_R32G32_{FLOAT,SINT,UINT}
.IP "\(bu" 2
DXGI_FORMAT_R32_{SINT,UINT}
.IP "\(bu" 2
DXGI_FORMAT_R8G8B8A8_{SINT,SNORM,UINT,UNORM,UNORM_SRGB}
.IP "\(bu" 2
DXGI_FORMAT_R8G8_{SINT,SNORM,UINT,UNORM}
.IP "\(bu" 2
DXGI_FORMAT_R8_{SINT,SNORM,UINT,UNORM}
.PP
.PP
If \fCpD3DResource\fP is of incorrect type or is already registered then \fBCUDA_ERROR_INVALID_HANDLE\fP is returned. If \fCpD3DResource\fP cannot be registered then \fBCUDA_ERROR_UNKNOWN\fP is returned. If \fCFlags\fP is not one of the above specified value then \fBCUDA_ERROR_INVALID_VALUE\fP is returned.
.PP
\fBParameters:\fP
.RS 4
\fIpCudaResource\fP - Returned graphics resource handle 
.br
\fIpD3DResource\fP - Direct3D resource to register 
.br
\fIFlags\fP - Parameters for resource registration
.RE
.PP
\fBReturns:\fP
.RS 4
\fBCUDA_SUCCESS\fP, \fBCUDA_ERROR_DEINITIALIZED\fP, \fBCUDA_ERROR_NOT_INITIALIZED\fP, \fBCUDA_ERROR_INVALID_CONTEXT\fP, \fBCUDA_ERROR_INVALID_VALUE\fP, \fBCUDA_ERROR_INVALID_HANDLE\fP, \fBCUDA_ERROR_OUT_OF_MEMORY\fP, \fBCUDA_ERROR_UNKNOWN\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcuGraphicsUnregisterResource\fP, \fBcuGraphicsMapResources\fP, \fBcuGraphicsSubResourceGetMappedArray\fP, \fBcuGraphicsResourceGetMappedPointer\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen from the source code.
