.TH "Direct3D 10 Interoperability [DEPRECATED]" 3 "12 Jan 2017" "Version 6.0" "Doxygen" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Direct3D 10 Interoperability [DEPRECATED] \- 
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBCUD3D10map_flags\fP "
.br
.ti -1c
.RI "enum \fBCUD3D10register_flags\fP "
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBCUresult\fP \fBcuD3D10CtxCreate\fP (\fBCUcontext\fP *pCtx, \fBCUdevice\fP *pCudaDevice, unsigned int Flags, ID3D10Device *pD3DDevice)"
.br
.RI "\fICreate a CUDA context for interoperability with Direct3D 10. \fP"
.ti -1c
.RI "\fBCUresult\fP \fBcuD3D10CtxCreateOnDevice\fP (\fBCUcontext\fP *pCtx, unsigned int flags, ID3D10Device *pD3DDevice, \fBCUdevice\fP cudaDevice)"
.br
.RI "\fICreate a CUDA context for interoperability with Direct3D 10. \fP"
.ti -1c
.RI "\fBCUresult\fP \fBcuD3D10GetDirect3DDevice\fP (ID3D10Device **ppD3DDevice)"
.br
.RI "\fIGet the Direct3D 10 device against which the current CUDA context was created. \fP"
.ti -1c
.RI "\fBCUresult\fP \fBcuD3D10MapResources\fP (unsigned int count, ID3D10Resource **ppResources)"
.br
.RI "\fIMap Direct3D resources for access by CUDA. \fP"
.ti -1c
.RI "\fBCUresult\fP \fBcuD3D10RegisterResource\fP (ID3D10Resource *pResource, unsigned int Flags)"
.br
.RI "\fIRegister a Direct3D resource for access by CUDA. \fP"
.ti -1c
.RI "\fBCUresult\fP \fBcuD3D10ResourceGetMappedArray\fP (\fBCUarray\fP *pArray, ID3D10Resource *pResource, unsigned int SubResource)"
.br
.RI "\fIGet an array through which to access a subresource of a Direct3D resource which has been mapped for access by CUDA. \fP"
.ti -1c
.RI "\fBCUresult\fP \fBcuD3D10ResourceGetMappedPitch\fP (size_t *pPitch, size_t *pPitchSlice, ID3D10Resource *pResource, unsigned int SubResource)"
.br
.RI "\fIGet the pitch of a subresource of a Direct3D resource which has been mapped for access by CUDA. \fP"
.ti -1c
.RI "\fBCUresult\fP \fBcuD3D10ResourceGetMappedPointer\fP (\fBCUdeviceptr\fP *pDevPtr, ID3D10Resource *pResource, unsigned int SubResource)"
.br
.RI "\fIGet a pointer through which to access a subresource of a Direct3D resource which has been mapped for access by CUDA. \fP"
.ti -1c
.RI "\fBCUresult\fP \fBcuD3D10ResourceGetMappedSize\fP (size_t *pSize, ID3D10Resource *pResource, unsigned int SubResource)"
.br
.RI "\fIGet the size of a subresource of a Direct3D resource which has been mapped for access by CUDA. \fP"
.ti -1c
.RI "\fBCUresult\fP \fBcuD3D10ResourceGetSurfaceDimensions\fP (size_t *pWidth, size_t *pHeight, size_t *pDepth, ID3D10Resource *pResource, unsigned int SubResource)"
.br
.RI "\fIGet the dimensions of a registered surface. \fP"
.ti -1c
.RI "\fBCUresult\fP \fBcuD3D10ResourceSetMapFlags\fP (ID3D10Resource *pResource, unsigned int Flags)"
.br
.RI "\fISet usage flags for mapping a Direct3D resource. \fP"
.ti -1c
.RI "\fBCUresult\fP \fBcuD3D10UnmapResources\fP (unsigned int count, ID3D10Resource **ppResources)"
.br
.RI "\fIUnmap Direct3D resources. \fP"
.ti -1c
.RI "\fBCUresult\fP \fBcuD3D10UnregisterResource\fP (ID3D10Resource *pResource)"
.br
.RI "\fIUnregister a Direct3D resource. \fP"
.in -1c
.SH "Detailed Description"
.PP 
\\brief deprecated Direct3D 10 interoperability functions of the low-level CUDA driver API (cudaD3D10.h)
.PP
This section describes deprecated Direct3D 10 interoperability functionality. 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBCUD3D10map_flags\fP"
.PP
Flags to map or unmap a resource 
.SS "enum \fBCUD3D10register_flags\fP"
.PP
Flags to register a resource 
.SH "Function Documentation"
.PP 
.SS "\fBCUresult\fP cuD3D10CtxCreate (\fBCUcontext\fP * pCtx, \fBCUdevice\fP * pCudaDevice, unsigned int Flags, ID3D10Device * pD3DDevice)"
.PP
\fBDeprecated\fP
.RS 4
This function is deprecated as of CUDA 5.0.
.RE
.PP
This function is deprecated and should no longer be used. It is no longer necessary to associate a CUDA context with a D3D10 device in order to achieve maximum interoperability performance.
.PP
\fBParameters:\fP
.RS 4
\fIpCtx\fP - Returned newly created CUDA context 
.br
\fIpCudaDevice\fP - Returned pointer to the device on which the context was created 
.br
\fIFlags\fP - Context creation flags (see \fBcuCtxCreate()\fP for details) 
.br
\fIpD3DDevice\fP - Direct3D device to create interoperability context with
.RE
.PP
\fBReturns:\fP
.RS 4
\fBCUDA_SUCCESS\fP, \fBCUDA_ERROR_DEINITIALIZED\fP, \fBCUDA_ERROR_NOT_INITIALIZED\fP, \fBCUDA_ERROR_INVALID_VALUE\fP, \fBCUDA_ERROR_OUT_OF_MEMORY\fP, \fBCUDA_ERROR_UNKNOWN\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcuD3D10GetDevice\fP, \fBcuGraphicsD3D10RegisterResource\fP 
.RE
.PP

.SS "\fBCUresult\fP cuD3D10CtxCreateOnDevice (\fBCUcontext\fP * pCtx, unsigned int flags, ID3D10Device * pD3DDevice, \fBCUdevice\fP cudaDevice)"
.PP
\fBDeprecated\fP
.RS 4
This function is deprecated as of CUDA 5.0.
.RE
.PP
This function is deprecated and should no longer be used. It is no longer necessary to associate a CUDA context with a D3D10 device in order to achieve maximum interoperability performance.
.PP
\fBParameters:\fP
.RS 4
\fIpCtx\fP - Returned newly created CUDA context 
.br
\fIflags\fP - Context creation flags (see \fBcuCtxCreate()\fP for details) 
.br
\fIpD3DDevice\fP - Direct3D device to create interoperability context with 
.br
\fIcudaDevice\fP - The CUDA device on which to create the context. This device must be among the devices returned when querying CU_D3D10_DEVICES_ALL from \fBcuD3D10GetDevices\fP.
.RE
.PP
\fBReturns:\fP
.RS 4
\fBCUDA_SUCCESS\fP, \fBCUDA_ERROR_DEINITIALIZED\fP, \fBCUDA_ERROR_NOT_INITIALIZED\fP, \fBCUDA_ERROR_INVALID_VALUE\fP, \fBCUDA_ERROR_OUT_OF_MEMORY\fP, \fBCUDA_ERROR_UNKNOWN\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcuD3D10GetDevices\fP, \fBcuGraphicsD3D10RegisterResource\fP 
.RE
.PP

.SS "\fBCUresult\fP cuD3D10GetDirect3DDevice (ID3D10Device ** ppD3DDevice)"
.PP
\fBDeprecated\fP
.RS 4
This function is deprecated as of CUDA 5.0.
.RE
.PP
This function is deprecated and should no longer be used. It is no longer necessary to associate a CUDA context with a D3D10 device in order to achieve maximum interoperability performance.
.PP
\fBParameters:\fP
.RS 4
\fIppD3DDevice\fP - Returned Direct3D device corresponding to CUDA context
.RE
.PP
\fBReturns:\fP
.RS 4
\fBCUDA_SUCCESS\fP, \fBCUDA_ERROR_DEINITIALIZED\fP, \fBCUDA_ERROR_NOT_INITIALIZED\fP, \fBCUDA_ERROR_INVALID_CONTEXT\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcuD3D10GetDevice\fP 
.RE
.PP

.SS "\fBCUresult\fP cuD3D10MapResources (unsigned int count, ID3D10Resource ** ppResources)"
.PP
\fBDeprecated\fP
.RS 4
This function is deprecated as of CUDA 3.0.
.RE
.PP
Maps the \fCcount\fP Direct3D resources in \fCppResources\fP for access by CUDA.
.PP
The resources in \fCppResources\fP may be accessed in CUDA kernels until they are unmapped. Direct3D should not access any resources while they are mapped by CUDA. If an application does so, the results are undefined.
.PP
This function provides the synchronization guarantee that any Direct3D calls issued before \fBcuD3D10MapResources()\fP will complete before any CUDA kernels issued after \fBcuD3D10MapResources()\fP begin.
.PP
If any of \fCppResources\fP have not been registered for use with CUDA or if \fCppResources\fP contains any duplicate entries, then \fBCUDA_ERROR_INVALID_HANDLE\fP is returned. If any of \fCppResources\fP are presently mapped for access by CUDA, then \fBCUDA_ERROR_ALREADY_MAPPED\fP is returned.
.PP
\fBParameters:\fP
.RS 4
\fIcount\fP - Number of resources to map for CUDA 
.br
\fIppResources\fP - Resources to map for CUDA
.RE
.PP
\fBReturns:\fP
.RS 4
\fBCUDA_SUCCESS\fP, \fBCUDA_ERROR_DEINITIALIZED\fP, \fBCUDA_ERROR_NOT_INITIALIZED\fP, \fBCUDA_ERROR_INVALID_CONTEXT\fP, \fBCUDA_ERROR_INVALID_HANDLE\fP, \fBCUDA_ERROR_ALREADY_MAPPED\fP, \fBCUDA_ERROR_UNKNOWN\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcuGraphicsMapResources\fP 
.RE
.PP

.SS "\fBCUresult\fP cuD3D10RegisterResource (ID3D10Resource * pResource, unsigned int Flags)"
.PP
\fBDeprecated\fP
.RS 4
This function is deprecated as of CUDA 3.0.
.RE
.PP
Registers the Direct3D resource \fCpResource\fP for access by CUDA.
.PP
If this call is successful, then the application will be able to map and unmap this resource until it is unregistered through \fBcuD3D10UnregisterResource()\fP. Also on success, this call will increase the internal reference count on \fCpResource\fP. This reference count will be decremented when this resource is unregistered through \fBcuD3D10UnregisterResource()\fP.
.PP
This call is potentially high-overhead and should not be called every frame in interactive applications.
.PP
The type of \fCpResource\fP must be one of the following.
.PP
.IP "\(bu" 2
ID3D10Buffer: Cannot be used with \fCFlags\fP set to CU_D3D10_REGISTER_FLAGS_ARRAY.
.IP "\(bu" 2
ID3D10Texture1D: No restrictions.
.IP "\(bu" 2
ID3D10Texture2D: No restrictions.
.IP "\(bu" 2
ID3D10Texture3D: No restrictions.
.PP
.PP
The \fCFlags\fP argument specifies the mechanism through which CUDA will access the Direct3D resource. The following values are allowed.
.PP
.IP "\(bu" 2
CU_D3D10_REGISTER_FLAGS_NONE: Specifies that CUDA will access this resource through a \fBCUdeviceptr\fP. The pointer, size, and (for textures), pitch for each subresource of this allocation may be queried through \fBcuD3D10ResourceGetMappedPointer()\fP, \fBcuD3D10ResourceGetMappedSize()\fP, and \fBcuD3D10ResourceGetMappedPitch()\fP respectively. This option is valid for all resource types.
.IP "\(bu" 2
CU_D3D10_REGISTER_FLAGS_ARRAY: Specifies that CUDA will access this resource through a \fBCUarray\fP queried on a sub-resource basis through \fBcuD3D10ResourceGetMappedArray()\fP. This option is only valid for resources of type ID3D10Texture1D, ID3D10Texture2D, and ID3D10Texture3D.
.PP
.PP
Not all Direct3D resources of the above types may be used for interoperability with CUDA. The following are some limitations.
.PP
.IP "\(bu" 2
The primary rendertarget may not be registered with CUDA.
.IP "\(bu" 2
Resources allocated as shared may not be registered with CUDA.
.IP "\(bu" 2
Textures which are not of a format which is 1, 2, or 4 channels of 8, 16, or 32-bit integer or floating-point data cannot be shared.
.IP "\(bu" 2
Surfaces of depth or stencil formats cannot be shared.
.PP
.PP
If Direct3D interoperability is not initialized on this context then \fBCUDA_ERROR_INVALID_CONTEXT\fP is returned. If \fCpResource\fP is of incorrect type or is already registered, then \fBCUDA_ERROR_INVALID_HANDLE\fP is returned. If \fCpResource\fP cannot be registered, then \fBCUDA_ERROR_UNKNOWN\fP is returned.
.PP
\fBParameters:\fP
.RS 4
\fIpResource\fP - Resource to register 
.br
\fIFlags\fP - Parameters for resource registration
.RE
.PP
\fBReturns:\fP
.RS 4
\fBCUDA_SUCCESS\fP, \fBCUDA_ERROR_DEINITIALIZED\fP, \fBCUDA_ERROR_NOT_INITIALIZED\fP, \fBCUDA_ERROR_INVALID_CONTEXT\fP, \fBCUDA_ERROR_INVALID_VALUE\fP, \fBCUDA_ERROR_INVALID_HANDLE\fP, \fBCUDA_ERROR_OUT_OF_MEMORY\fP, \fBCUDA_ERROR_UNKNOWN\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcuGraphicsD3D10RegisterResource\fP 
.RE
.PP

.SS "\fBCUresult\fP cuD3D10ResourceGetMappedArray (\fBCUarray\fP * pArray, ID3D10Resource * pResource, unsigned int SubResource)"
.PP
\fBDeprecated\fP
.RS 4
This function is deprecated as of CUDA 3.0.
.RE
.PP
Returns in \fC*pArray\fP an array through which the subresource of the mapped Direct3D resource \fCpResource\fP, which corresponds to \fCSubResource\fP may be accessed. The value set in \fCpArray\fP may change every time that \fCpResource\fP is mapped.
.PP
If \fCpResource\fP is not registered, then \fBCUDA_ERROR_INVALID_HANDLE\fP is returned. If \fCpResource\fP was not registered with usage flags CU_D3D10_REGISTER_FLAGS_ARRAY, then \fBCUDA_ERROR_INVALID_HANDLE\fP is returned. If \fCpResource\fP is not mapped, then \fBCUDA_ERROR_NOT_MAPPED\fP is returned.
.PP
For usage requirements of the \fCSubResource\fP parameter, see \fBcuD3D10ResourceGetMappedPointer()\fP.
.PP
\fBParameters:\fP
.RS 4
\fIpArray\fP - Returned array corresponding to subresource 
.br
\fIpResource\fP - Mapped resource to access 
.br
\fISubResource\fP - Subresource of pResource to access
.RE
.PP
\fBReturns:\fP
.RS 4
\fBCUDA_SUCCESS\fP, \fBCUDA_ERROR_DEINITIALIZED\fP, \fBCUDA_ERROR_NOT_INITIALIZED\fP, \fBCUDA_ERROR_INVALID_CONTEXT\fP, \fBCUDA_ERROR_INVALID_VALUE\fP, \fBCUDA_ERROR_INVALID_HANDLE\fP, \fBCUDA_ERROR_NOT_MAPPED\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcuGraphicsSubResourceGetMappedArray\fP 
.RE
.PP

.SS "\fBCUresult\fP cuD3D10ResourceGetMappedPitch (size_t * pPitch, size_t * pPitchSlice, ID3D10Resource * pResource, unsigned int SubResource)"
.PP
\fBDeprecated\fP
.RS 4
This function is deprecated as of CUDA 3.0.
.RE
.PP
Returns in \fC*pPitch\fP and \fC*pPitchSlice\fP the pitch and Z-slice pitch of the subresource of the mapped Direct3D resource \fCpResource\fP, which corresponds to \fCSubResource\fP. The values set in \fCpPitch\fP and \fCpPitchSlice\fP may change every time that \fCpResource\fP is mapped.
.PP
The pitch and Z-slice pitch values may be used to compute the location of a sample on a surface as follows.
.PP
For a 2D surface, the byte offset of the sample at position \fBx\fP, \fBy\fP from the base pointer of the surface is:
.PP
\fBy\fP * \fBpitch\fP + (\fBbytes per pixel\fP) * \fBx\fP 
.PP
For a 3D surface, the byte offset of the sample at position \fBx\fP, \fBy\fP, \fBz\fP from the base pointer of the surface is:
.PP
\fBz*\fP \fBslicePitch\fP + \fBy\fP * \fBpitch\fP + (\fBbytes per pixel\fP) * \fBx\fP 
.PP
Both parameters \fCpPitch\fP and \fCpPitchSlice\fP are optional and may be set to NULL.
.PP
If \fCpResource\fP is not of type IDirect3DBaseTexture10 or one of its sub-types or if \fCpResource\fP has not been registered for use with CUDA, then \fBCUDA_ERROR_INVALID_HANDLE\fP is returned. If \fCpResource\fP was not registered with usage flags CU_D3D10_REGISTER_FLAGS_NONE, then \fBCUDA_ERROR_INVALID_HANDLE\fP is returned. If \fCpResource\fP is not mapped for access by CUDA, then \fBCUDA_ERROR_NOT_MAPPED\fP is returned.
.PP
For usage requirements of the \fCSubResource\fP parameter, see \fBcuD3D10ResourceGetMappedPointer()\fP.
.PP
\fBParameters:\fP
.RS 4
\fIpPitch\fP - Returned pitch of subresource 
.br
\fIpPitchSlice\fP - Returned Z-slice pitch of subresource 
.br
\fIpResource\fP - Mapped resource to access 
.br
\fISubResource\fP - Subresource of pResource to access
.RE
.PP
\fBReturns:\fP
.RS 4
\fBCUDA_SUCCESS\fP, \fBCUDA_ERROR_DEINITIALIZED\fP, \fBCUDA_ERROR_NOT_INITIALIZED\fP, \fBCUDA_ERROR_INVALID_CONTEXT\fP, \fBCUDA_ERROR_INVALID_VALUE\fP, \fBCUDA_ERROR_INVALID_HANDLE\fP, \fBCUDA_ERROR_NOT_MAPPED\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcuGraphicsSubResourceGetMappedArray\fP 
.RE
.PP

.SS "\fBCUresult\fP cuD3D10ResourceGetMappedPointer (\fBCUdeviceptr\fP * pDevPtr, ID3D10Resource * pResource, unsigned int SubResource)"
.PP
\fBDeprecated\fP
.RS 4
This function is deprecated as of CUDA 3.0.
.RE
.PP
Returns in \fC*pDevPtr\fP the base pointer of the subresource of the mapped Direct3D resource \fCpResource\fP, which corresponds to \fCSubResource\fP. The value set in \fCpDevPtr\fP may change every time that \fCpResource\fP is mapped.
.PP
If \fCpResource\fP is not registered, then \fBCUDA_ERROR_INVALID_HANDLE\fP is returned. If \fCpResource\fP was not registered with usage flags CU_D3D10_REGISTER_FLAGS_NONE, then \fBCUDA_ERROR_INVALID_HANDLE\fP is returned. If \fCpResource\fP is not mapped, then \fBCUDA_ERROR_NOT_MAPPED\fP is returned.
.PP
If \fCpResource\fP is of type ID3D10Buffer, then \fCSubResource\fP must be 0. If \fCpResource\fP is of any other type, then the value of \fCSubResource\fP must come from the subresource calculation in D3D10CalcSubResource().
.PP
\fBParameters:\fP
.RS 4
\fIpDevPtr\fP - Returned pointer corresponding to subresource 
.br
\fIpResource\fP - Mapped resource to access 
.br
\fISubResource\fP - Subresource of pResource to access
.RE
.PP
\fBReturns:\fP
.RS 4
\fBCUDA_SUCCESS\fP, \fBCUDA_ERROR_DEINITIALIZED\fP, \fBCUDA_ERROR_NOT_INITIALIZED\fP, \fBCUDA_ERROR_INVALID_CONTEXT\fP, \fBCUDA_ERROR_INVALID_VALUE\fP, \fBCUDA_ERROR_INVALID_HANDLE\fP, \fBCUDA_ERROR_NOT_MAPPED\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcuGraphicsResourceGetMappedPointer\fP 
.RE
.PP

.SS "\fBCUresult\fP cuD3D10ResourceGetMappedSize (size_t * pSize, ID3D10Resource * pResource, unsigned int SubResource)"
.PP
\fBDeprecated\fP
.RS 4
This function is deprecated as of CUDA 3.0.
.RE
.PP
Returns in \fC*pSize\fP the size of the subresource of the mapped Direct3D resource \fCpResource\fP, which corresponds to \fCSubResource\fP. The value set in \fCpSize\fP may change every time that \fCpResource\fP is mapped.
.PP
If \fCpResource\fP has not been registered for use with CUDA, then \fBCUDA_ERROR_INVALID_HANDLE\fP is returned. If \fCpResource\fP was not registered with usage flags CU_D3D10_REGISTER_FLAGS_NONE, then \fBCUDA_ERROR_INVALID_HANDLE\fP is returned. If \fCpResource\fP is not mapped for access by CUDA, then \fBCUDA_ERROR_NOT_MAPPED\fP is returned.
.PP
For usage requirements of the \fCSubResource\fP parameter, see \fBcuD3D10ResourceGetMappedPointer()\fP.
.PP
\fBParameters:\fP
.RS 4
\fIpSize\fP - Returned size of subresource 
.br
\fIpResource\fP - Mapped resource to access 
.br
\fISubResource\fP - Subresource of pResource to access
.RE
.PP
\fBReturns:\fP
.RS 4
\fBCUDA_SUCCESS\fP, \fBCUDA_ERROR_DEINITIALIZED\fP, \fBCUDA_ERROR_NOT_INITIALIZED\fP, \fBCUDA_ERROR_INVALID_CONTEXT\fP, \fBCUDA_ERROR_INVALID_VALUE\fP, \fBCUDA_ERROR_INVALID_HANDLE\fP, \fBCUDA_ERROR_NOT_MAPPED\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcuGraphicsResourceGetMappedPointer\fP 
.RE
.PP

.SS "\fBCUresult\fP cuD3D10ResourceGetSurfaceDimensions (size_t * pWidth, size_t * pHeight, size_t * pDepth, ID3D10Resource * pResource, unsigned int SubResource)"
.PP
\fBDeprecated\fP
.RS 4
This function is deprecated as of CUDA 3.0.
.RE
.PP
Returns in \fC*pWidth\fP, \fC*pHeight\fP, and \fC*pDepth\fP the dimensions of the subresource of the mapped Direct3D resource \fCpResource\fP, which corresponds to \fCSubResource\fP.
.PP
Because anti-aliased surfaces may have multiple samples per pixel, it is possible that the dimensions of a resource will be an integer factor larger than the dimensions reported by the Direct3D runtime.
.PP
The parameters \fCpWidth\fP, \fCpHeight\fP, and \fCpDepth\fP are optional. For 2D surfaces, the value returned in \fC*pDepth\fP will be 0.
.PP
If \fCpResource\fP is not of type IDirect3DBaseTexture10 or IDirect3DSurface10 or if \fCpResource\fP has not been registered for use with CUDA, then \fBCUDA_ERROR_INVALID_HANDLE\fP is returned.
.PP
For usage requirements of the \fCSubResource\fP parameter, see \fBcuD3D10ResourceGetMappedPointer()\fP.
.PP
\fBParameters:\fP
.RS 4
\fIpWidth\fP - Returned width of surface 
.br
\fIpHeight\fP - Returned height of surface 
.br
\fIpDepth\fP - Returned depth of surface 
.br
\fIpResource\fP - Registered resource to access 
.br
\fISubResource\fP - Subresource of pResource to access
.RE
.PP
\fBReturns:\fP
.RS 4
\fBCUDA_SUCCESS\fP, \fBCUDA_ERROR_DEINITIALIZED\fP, \fBCUDA_ERROR_NOT_INITIALIZED\fP, \fBCUDA_ERROR_INVALID_CONTEXT\fP, \fBCUDA_ERROR_INVALID_VALUE\fP, \fBCUDA_ERROR_INVALID_HANDLE\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcuGraphicsSubResourceGetMappedArray\fP 
.RE
.PP

.SS "\fBCUresult\fP cuD3D10ResourceSetMapFlags (ID3D10Resource * pResource, unsigned int Flags)"
.PP
\fBDeprecated\fP
.RS 4
This function is deprecated as of CUDA 3.0.
.RE
.PP
Set flags for mapping the Direct3D resource \fCpResource\fP.
.PP
Changes to flags will take effect the next time \fCpResource\fP is mapped. The \fCFlags\fP argument may be any of the following.
.PP
.IP "\(bu" 2
CU_D3D10_MAPRESOURCE_FLAGS_NONE: Specifies no hints about how this resource will be used. It is therefore assumed that this resource will be read from and written to by CUDA kernels. This is the default value.
.IP "\(bu" 2
CU_D3D10_MAPRESOURCE_FLAGS_READONLY: Specifies that CUDA kernels which access this resource will not write to this resource.
.IP "\(bu" 2
CU_D3D10_MAPRESOURCE_FLAGS_WRITEDISCARD: Specifies that CUDA kernels which access this resource will not read from this resource and will write over the entire contents of the resource, so none of the data previously stored in the resource will be preserved.
.PP
.PP
If \fCpResource\fP has not been registered for use with CUDA, then \fBCUDA_ERROR_INVALID_HANDLE\fP is returned. If \fCpResource\fP is presently mapped for access by CUDA then \fBCUDA_ERROR_ALREADY_MAPPED\fP is returned.
.PP
\fBParameters:\fP
.RS 4
\fIpResource\fP - Registered resource to set flags for 
.br
\fIFlags\fP - Parameters for resource mapping
.RE
.PP
\fBReturns:\fP
.RS 4
\fBCUDA_SUCCESS\fP, \fBCUDA_ERROR_DEINITIALIZED\fP, \fBCUDA_ERROR_NOT_INITIALIZED\fP, \fBCUDA_ERROR_INVALID_CONTEXT\fP, \fBCUDA_ERROR_INVALID_VALUE\fP, \fBCUDA_ERROR_INVALID_HANDLE\fP, \fBCUDA_ERROR_ALREADY_MAPPED\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcuGraphicsResourceSetMapFlags\fP 
.RE
.PP

.SS "\fBCUresult\fP cuD3D10UnmapResources (unsigned int count, ID3D10Resource ** ppResources)"
.PP
\fBDeprecated\fP
.RS 4
This function is deprecated as of CUDA 3.0.
.RE
.PP
Unmaps the \fCcount\fP Direct3D resources in \fCppResources\fP.
.PP
This function provides the synchronization guarantee that any CUDA kernels issued before \fBcuD3D10UnmapResources()\fP will complete before any Direct3D calls issued after \fBcuD3D10UnmapResources()\fP begin.
.PP
If any of \fCppResources\fP have not been registered for use with CUDA or if \fCppResources\fP contains any duplicate entries, then \fBCUDA_ERROR_INVALID_HANDLE\fP is returned. If any of \fCppResources\fP are not presently mapped for access by CUDA, then \fBCUDA_ERROR_NOT_MAPPED\fP is returned.
.PP
\fBParameters:\fP
.RS 4
\fIcount\fP - Number of resources to unmap for CUDA 
.br
\fIppResources\fP - Resources to unmap for CUDA
.RE
.PP
\fBReturns:\fP
.RS 4
\fBCUDA_SUCCESS\fP, \fBCUDA_ERROR_DEINITIALIZED\fP, \fBCUDA_ERROR_NOT_INITIALIZED\fP, \fBCUDA_ERROR_INVALID_CONTEXT\fP, \fBCUDA_ERROR_INVALID_VALUE\fP, \fBCUDA_ERROR_INVALID_HANDLE\fP, \fBCUDA_ERROR_NOT_MAPPED\fP, \fBCUDA_ERROR_UNKNOWN\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcuGraphicsUnmapResources\fP 
.RE
.PP

.SS "\fBCUresult\fP cuD3D10UnregisterResource (ID3D10Resource * pResource)"
.PP
\fBDeprecated\fP
.RS 4
This function is deprecated as of CUDA 3.0.
.RE
.PP
Unregisters the Direct3D resource \fCpResource\fP so it is not accessible by CUDA unless registered again.
.PP
If \fCpResource\fP is not registered, then \fBCUDA_ERROR_INVALID_HANDLE\fP is returned.
.PP
\fBParameters:\fP
.RS 4
\fIpResource\fP - Resources to unregister
.RE
.PP
\fBReturns:\fP
.RS 4
\fBCUDA_SUCCESS\fP, \fBCUDA_ERROR_DEINITIALIZED\fP, \fBCUDA_ERROR_NOT_INITIALIZED\fP, \fBCUDA_ERROR_INVALID_CONTEXT\fP, \fBCUDA_ERROR_INVALID_HANDLE\fP, \fBCUDA_ERROR_UNKNOWN\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcuGraphicsUnregisterResource\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen from the source code.
