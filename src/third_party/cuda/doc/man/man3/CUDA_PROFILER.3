.TH "Profiler Control" 3 "12 Jan 2017" "Version 6.0" "Doxygen" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Profiler Control \- 
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBCUresult\fP \fBcuProfilerInitialize\fP (const char *configFile, const char *outputFile, CUoutput_mode outputMode)"
.br
.RI "\fIInitialize the profiling. \fP"
.ti -1c
.RI "\fBCUresult\fP \fBcuProfilerStart\fP (void)"
.br
.RI "\fIEnable profiling. \fP"
.ti -1c
.RI "\fBCUresult\fP \fBcuProfilerStop\fP (void)"
.br
.RI "\fIDisable profiling. \fP"
.in -1c
.SH "Detailed Description"
.PP 
\\brief profiler control functions of the low-level CUDA driver API (cudaProfiler.h)
.PP
This section describes the profiler control functions of the low-level CUDA driver application programming interface. 
.SH "Function Documentation"
.PP 
.SS "\fBCUresult\fP cuProfilerInitialize (const char * configFile, const char * outputFile, CUoutput_mode outputMode)"
.PP
Using this API user can initialize the CUDA profiler by specifying the configuration file, output file and output file format. This API is generally used to profile different set of counters by looping the kernel launch. The \fCconfigFile\fP parameter can be used to select profiling options including profiler counters. Refer to the 'Compute Command Line Profiler User Guide' for supported profiler options and counters.
.PP
Limitation: The CUDA profiler cannot be initialized with this API if another profiling tool is already active, as indicated by the \fBCUDA_ERROR_PROFILER_DISABLED\fP return code.
.PP
Typical usage of the profiling APIs is as follows:
.PP
for each set of counters/options
.br
 {
.br
 \fBcuProfilerInitialize()\fP; //Initialize profiling, set the counters or options in the config file 
.br
 ...
.br
 \fBcuProfilerStart()\fP; 
.br
 // code to be profiled 
.br
 \fBcuProfilerStop()\fP; 
.br
 ...
.br
 \fBcuProfilerStart()\fP; 
.br
 // code to be profiled 
.br
 \fBcuProfilerStop()\fP; 
.br
 ...
.br
 }
.br
.PP
\fBParameters:\fP
.RS 4
\fIconfigFile\fP - Name of the config file that lists the counters/options for profiling. 
.br
\fIoutputFile\fP - Name of the outputFile where the profiling results will be stored. 
.br
\fIoutputMode\fP - outputMode, can be CU_OUT_KEY_VALUE_PAIR or CU_OUT_CSV.
.RE
.PP
\fBReturns:\fP
.RS 4
\fBCUDA_SUCCESS\fP, \fBCUDA_ERROR_INVALID_CONTEXT\fP, \fBCUDA_ERROR_INVALID_VALUE\fP, \fBCUDA_ERROR_PROFILER_DISABLED\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcuProfilerStart\fP, \fBcuProfilerStop\fP 
.RE
.PP

.SS "\fBCUresult\fP cuProfilerStart (void)"
.PP
Enables profile collection by the active profiling tool for the current context. If profiling is already enabled, then \fBcuProfilerStart()\fP has no effect.
.PP
cuProfilerStart and cuProfilerStop APIs are used to programmatically control the profiling granularity by allowing profiling to be done only on selective pieces of code.
.PP
\fBReturns:\fP
.RS 4
\fBCUDA_SUCCESS\fP, \fBCUDA_ERROR_INVALID_CONTEXT\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcuProfilerInitialize\fP, \fBcuProfilerStop\fP 
.RE
.PP

.SS "\fBCUresult\fP cuProfilerStop (void)"
.PP
Disables profile collection by the active profiling tool for the current context. If profiling is already disabled, then \fBcuProfilerStop()\fP has no effect.
.PP
cuProfilerStart and cuProfilerStop APIs are used to programmatically control the profiling granularity by allowing profiling to be done only on selective pieces of code.
.PP
\fBReturns:\fP
.RS 4
\fBCUDA_SUCCESS\fP, \fBCUDA_ERROR_INVALID_CONTEXT\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcuProfilerInitialize\fP, \fBcuProfilerStart\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen from the source code.
