.TH "VDPAU Interoperability" 3 "12 Jan 2017" "Version 6.0" "Doxygen" \" -*- nroff -*-
.ad l
.nh
.SH NAME
VDPAU Interoperability \- 
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBCUresult\fP \fBcuGraphicsVDPAURegisterOutputSurface\fP (\fBCUgraphicsResource\fP *pCudaResource, VdpOutputSurface vdpSurface, unsigned int flags)"
.br
.RI "\fIRegisters a VDPAU VdpOutputSurface object. \fP"
.ti -1c
.RI "\fBCUresult\fP \fBcuGraphicsVDPAURegisterVideoSurface\fP (\fBCUgraphicsResource\fP *pCudaResource, VdpVideoSurface vdpSurface, unsigned int flags)"
.br
.RI "\fIRegisters a VDPAU VdpVideoSurface object. \fP"
.ti -1c
.RI "\fBCUresult\fP \fBcuVDPAUCtxCreate\fP (\fBCUcontext\fP *pCtx, unsigned int flags, \fBCUdevice\fP device, VdpDevice vdpDevice, VdpGetProcAddress *vdpGetProcAddress)"
.br
.RI "\fICreate a CUDA context for interoperability with VDPAU. \fP"
.ti -1c
.RI "\fBCUresult\fP \fBcuVDPAUGetDevice\fP (\fBCUdevice\fP *pDevice, VdpDevice vdpDevice, VdpGetProcAddress *vdpGetProcAddress)"
.br
.RI "\fIGets the CUDA device associated with a VDPAU device. \fP"
.in -1c
.SH "Detailed Description"
.PP 
\\brief VDPAU interoperability functions of the low-level CUDA driver API (cudaVDPAU.h)
.PP
This section describes the VDPAU interoperability functions of the low-level CUDA driver application programming interface. 
.SH "Function Documentation"
.PP 
.SS "\fBCUresult\fP cuGraphicsVDPAURegisterOutputSurface (\fBCUgraphicsResource\fP * pCudaResource, VdpOutputSurface vdpSurface, unsigned int flags)"
.PP
Registers the VdpOutputSurface specified by \fCvdpSurface\fP for access by CUDA. A handle to the registered object is returned as \fCpCudaResource\fP. The surface's intended usage is specified using \fCflags\fP, as follows:
.PP
.IP "\(bu" 2
CU_GRAPHICS_MAP_RESOURCE_FLAGS_NONE: Specifies no hints about how this resource will be used. It is therefore assumed that this resource will be read from and written to by CUDA. This is the default value.
.IP "\(bu" 2
CU_GRAPHICS_MAP_RESOURCE_FLAGS_READ_ONLY: Specifies that CUDA will not write to this resource.
.IP "\(bu" 2
CU_GRAPHICS_MAP_RESOURCE_FLAGS_WRITE_DISCARD: Specifies that CUDA will not read from this resource and will write over the entire contents of the resource, so none of the data previously stored in the resource will be preserved.
.PP
.PP
The VdpOutputSurface is presented as an array of subresources that may be accessed using pointers returned by \fBcuGraphicsSubResourceGetMappedArray\fP. The exact number of valid \fCarrayIndex\fP values depends on the VDPAU surface format. The mapping is shown in the table below. \fCmipLevel\fP must be 0.
.PP
.PP
.PP
\fBParameters:\fP
.RS 4
\fIpCudaResource\fP - Pointer to the returned object handle 
.br
\fIvdpSurface\fP - The VdpOutputSurface to be registered 
.br
\fIflags\fP - Map flags
.RE
.PP
\fBReturns:\fP
.RS 4
\fBCUDA_SUCCESS\fP, \fBCUDA_ERROR_INVALID_HANDLE\fP, \fBCUDA_ERROR_ALREADY_MAPPED\fP, \fBCUDA_ERROR_INVALID_CONTEXT\fP, 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcuCtxCreate\fP, \fBcuVDPAUCtxCreate\fP, \fBcuGraphicsVDPAURegisterVideoSurface\fP, \fBcuGraphicsUnregisterResource\fP, \fBcuGraphicsResourceSetMapFlags\fP, \fBcuGraphicsMapResources\fP, \fBcuGraphicsUnmapResources\fP, \fBcuGraphicsSubResourceGetMappedArray\fP, \fBcuVDPAUGetDevice\fP 
.RE
.PP

.SS "\fBCUresult\fP cuGraphicsVDPAURegisterVideoSurface (\fBCUgraphicsResource\fP * pCudaResource, VdpVideoSurface vdpSurface, unsigned int flags)"
.PP
Registers the VdpVideoSurface specified by \fCvdpSurface\fP for access by CUDA. A handle to the registered object is returned as \fCpCudaResource\fP. The surface's intended usage is specified using \fCflags\fP, as follows:
.PP
.IP "\(bu" 2
CU_GRAPHICS_MAP_RESOURCE_FLAGS_NONE: Specifies no hints about how this resource will be used. It is therefore assumed that this resource will be read from and written to by CUDA. This is the default value.
.IP "\(bu" 2
CU_GRAPHICS_MAP_RESOURCE_FLAGS_READ_ONLY: Specifies that CUDA will not write to this resource.
.IP "\(bu" 2
CU_GRAPHICS_MAP_RESOURCE_FLAGS_WRITE_DISCARD: Specifies that CUDA will not read from this resource and will write over the entire contents of the resource, so none of the data previously stored in the resource will be preserved.
.PP
.PP
The VdpVideoSurface is presented as an array of subresources that may be accessed using pointers returned by \fBcuGraphicsSubResourceGetMappedArray\fP. The exact number of valid \fCarrayIndex\fP values depends on the VDPAU surface format. The mapping is shown in the table below. \fCmipLevel\fP must be 0.
.PP
.PP
.PP
\fBParameters:\fP
.RS 4
\fIpCudaResource\fP - Pointer to the returned object handle 
.br
\fIvdpSurface\fP - The VdpVideoSurface to be registered 
.br
\fIflags\fP - Map flags
.RE
.PP
\fBReturns:\fP
.RS 4
\fBCUDA_SUCCESS\fP, \fBCUDA_ERROR_INVALID_HANDLE\fP, \fBCUDA_ERROR_ALREADY_MAPPED\fP, \fBCUDA_ERROR_INVALID_CONTEXT\fP, 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcuCtxCreate\fP, \fBcuVDPAUCtxCreate\fP, \fBcuGraphicsVDPAURegisterOutputSurface\fP, \fBcuGraphicsUnregisterResource\fP, \fBcuGraphicsResourceSetMapFlags\fP, \fBcuGraphicsMapResources\fP, \fBcuGraphicsUnmapResources\fP, \fBcuGraphicsSubResourceGetMappedArray\fP, \fBcuVDPAUGetDevice\fP 
.RE
.PP

.SS "\fBCUresult\fP cuVDPAUCtxCreate (\fBCUcontext\fP * pCtx, unsigned int flags, \fBCUdevice\fP device, VdpDevice vdpDevice, VdpGetProcAddress * vdpGetProcAddress)"
.PP
Creates a new CUDA context, initializes VDPAU interoperability, and associates the CUDA context with the calling thread. It must be called before performing any other VDPAU interoperability operations. It may fail if the needed VDPAU driver facilities are not available. For usage of the \fCflags\fP parameter, see \fBcuCtxCreate()\fP.
.PP
\fBParameters:\fP
.RS 4
\fIpCtx\fP - Returned CUDA context 
.br
\fIflags\fP - Options for CUDA context creation 
.br
\fIdevice\fP - Device on which to create the context 
.br
\fIvdpDevice\fP - The VdpDevice to interop with 
.br
\fIvdpGetProcAddress\fP - VDPAU's VdpGetProcAddress function pointer
.RE
.PP
\fBReturns:\fP
.RS 4
\fBCUDA_SUCCESS\fP, \fBCUDA_ERROR_DEINITIALIZED\fP, \fBCUDA_ERROR_NOT_INITIALIZED\fP, \fBCUDA_ERROR_INVALID_CONTEXT\fP, \fBCUDA_ERROR_INVALID_VALUE\fP, \fBCUDA_ERROR_OUT_OF_MEMORY\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcuCtxCreate\fP, \fBcuGraphicsVDPAURegisterVideoSurface\fP, \fBcuGraphicsVDPAURegisterOutputSurface\fP, \fBcuGraphicsUnregisterResource\fP, \fBcuGraphicsResourceSetMapFlags\fP, \fBcuGraphicsMapResources\fP, \fBcuGraphicsUnmapResources\fP, \fBcuGraphicsSubResourceGetMappedArray\fP, \fBcuVDPAUGetDevice\fP 
.RE
.PP

.SS "\fBCUresult\fP cuVDPAUGetDevice (\fBCUdevice\fP * pDevice, VdpDevice vdpDevice, VdpGetProcAddress * vdpGetProcAddress)"
.PP
Returns in \fC*pDevice\fP the CUDA device associated with a \fCvdpDevice\fP, if applicable.
.PP
\fBParameters:\fP
.RS 4
\fIpDevice\fP - Device associated with vdpDevice 
.br
\fIvdpDevice\fP - A VdpDevice handle 
.br
\fIvdpGetProcAddress\fP - VDPAU's VdpGetProcAddress function pointer
.RE
.PP
\fBReturns:\fP
.RS 4
\fBCUDA_SUCCESS\fP, \fBCUDA_ERROR_DEINITIALIZED\fP, \fBCUDA_ERROR_NOT_INITIALIZED\fP, \fBCUDA_ERROR_INVALID_CONTEXT\fP, \fBCUDA_ERROR_INVALID_VALUE\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcuCtxCreate\fP, \fBcuVDPAUCtxCreate\fP, \fBcuGraphicsVDPAURegisterVideoSurface\fP, \fBcuGraphicsVDPAURegisterOutputSurface\fP, \fBcuGraphicsUnregisterResource\fP, \fBcuGraphicsResourceSetMapFlags\fP, \fBcuGraphicsMapResources\fP, \fBcuGraphicsUnmapResources\fP, \fBcuGraphicsSubResourceGetMappedArray\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen from the source code.
